<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Car Rental System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        :root {
            --primary-color: #3498db;
            --secondary-color: #2c3e50;
            --success-color: #27ae60;
            --danger-color: #e74c3c;
            --warning-color: #f39c12;
            --info-color: #17a2b8;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
        }
        
        .navbar-brand {
            font-weight: bold;
        }
        
        .sidebar {
            background-color: var(--secondary-color);
            color: white;
            min-height: calc(100vh - 56px);
            padding: 0;
        }
        
        .sidebar .nav-link {
            color: rgba(255, 255, 255, 0.8);
            padding: 12px 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .sidebar .nav-link:hover, .sidebar .nav-link.active {
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
        }
        
        .sidebar .nav-link i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }
        
        .card {
            border: none;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            margin-bottom: 20px;
        }
        
        .card-header {
            background-color: white;
            border-bottom: 1px solid rgba(0, 0, 0, 0.125);
            font-weight: 600;
        }
        
        .dashboard-card {
            transition: transform 0.3s;
        }
        
        .dashboard-card:hover {
            transform: translateY(-5px);
        }
        
        .table-responsive {
            border-radius: 5px;
        }
        
        .tab-content {
            padding: 20px;
            background-color: white;
            border-radius: 0 0 5px 5px;
        }
        
        .nav-tabs .nav-link.active {
            border-bottom: 3px solid var(--primary-color);
            font-weight: 600;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.25rem rgba(52, 152, 219, 0.25);
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }
        
        .btn-success {
            background-color: var(--success-color);
            border-color: var(--success-color);
        }
        
        .btn-danger {
            background-color: var(--danger-color);
            border-color: var(--danger-color);
        }
        
        .btn-warning {
            background-color: var(--warning-color);
            border-color: var(--warning-color);
        }
        
        .logo-container {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 15px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .system-name {
            font-size: 1.2rem;
            font-weight: bold;
            margin-left: 10px;
        }
        
        .copyright {
            position: absolute;
            bottom: 10px;
            width: 100%;
            text-align: center;
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.6);
        }
        
        .print-only {
            display: none;
        }
        
        @media print {
            .no-print {
                display: none !important;
            }
            .print-only {
                display: block;
            }
            body {
                background-color: white;
            }
            .card {
                box-shadow: none;
                border: 1px solid #ddd;
            }
        }
        
        .vehicle-details, .customer-details {
            display: none;
            margin-top: 20px;
        }
        
        .suggestion-list {
            position: absolute;
            background: white;
            border: 1px solid #ddd;
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            width: 100%;
            display: none;
        }
        
        .suggestion-item {
            padding: 8px 12px;
            cursor: pointer;
        }
        
        .suggestion-item:hover {
            background-color: #f8f9fa;
        }
        
        .status-returned {
            background-color: #d4edda;
        }
        
        .status-not-returned {
            background-color: #f8d7da;
        }
        
        .login-container {
            max-width: 400px;
            margin: 100px auto;
            padding: 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }
        
        .invoice-logo {
            text-align: center;
            margin-bottom: 20px;
        }
        
        .invoice-logo img {
            max-width: 200px;
            height: auto;
        }
        
        .custom-logo {
            max-height: 50px;
            margin-right: 10px;
        }
        
        .currency-badge {
            font-size: 0.7rem;
            margin-left: 5px;
        }
        
        .user-only {
            display: none;
        }
        
        .system-logo-large {
            max-width: 200px;
            max-height: 80px;
            margin-bottom: 15px;
        }
        
        .signature-area {
            margin-top: 50px;
            border-top: 1px solid #000;
            padding-top: 10px;
        }
        
        .maintenance-status {
            background-color: #fff3cd;
        }
        
        .edit-rental-form {
            display: none;
        }
    </style>
</head>
<body>
    <!-- Login Screen -->
    <div id="loginScreen" class="login-container">
        <div class="text-center mb-4">
            <i class="fas fa-car fa-3x text-primary mb-3"></i>
            <h2>Car Rental System</h2>
            <p class="text-muted">Please login to continue</p>
        </div>
        <form id="loginForm">
            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <input type="text" class="form-control" id="username" required>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="password" required>
            </div>
            <button type="submit" class="btn btn-primary w-100">Login</button>
        </form>
        <div class="text-center mt-3">
            <small class="text-muted">Default admin password: 000000</small>
        </div>
        <div class="text-center mt-4">
            <small class="text-muted">Created by Farzad Programmer - Not Editable</small>
        </div>
    </div>

    <!-- Main Application -->
    <div id="mainApp" style="display: none;">
        <!-- Navigation Bar -->
        <nav class="navbar navbar-expand-lg navbar-dark bg-dark no-print">
            <div class="container-fluid">
                <a class="navbar-brand" href="#">
                    <img id="headerLogo" src="" class="custom-logo" style="display: none;">
                    <span id="headerSystemName">Car Rental System</span>
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown">
                                <i class="fas fa-user-circle"></i> <span id="currentUser">Admin</span>
                            </a>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#changePasswordModal"><i class="fas fa-key"></i> Change Password</a></li>
                                <li class="admin-only"><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#userManagementModal"><i class="fas fa-users"></i> User Management</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="#" id="logoutBtn"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>

        <div class="container-fluid">
            <div class="row">
                <!-- Sidebar -->
                <div class="col-md-2 sidebar d-none d-md-block no-print">
                    <div class="logo-container">
                        <img id="sidebarLogo" src="" class="system-logo-large" style="display: none;">
                        <span class="system-name" id="sidebarSystemName">RentalSys</span>
                    </div>
                    <ul class="nav flex-column">
                        <li class="nav-item dashboard-item">
                            <a class="nav-link active" href="#dashboard" data-bs-toggle="tab">
                                <i class="fas fa-tachometer-alt"></i> Dashboard
                            </a>
                        </li>
                        <li class="nav-item vehicles-item">
                            <a class="nav-link" href="#vehicles" data-bs-toggle="tab">
                                <i class="fas fa-car"></i> Vehicles
                            </a>
                        </li>
                        <li class="nav-item customers-item">
                            <a class="nav-link" href="#customers" data-bs-toggle="tab">
                                <i class="fas fa-users"></i> Customers
                            </a>
                        </li>
                        <li class="nav-item rentals-item">
                            <a class="nav-link" href="#rentals" data-bs-toggle="tab">
                                <i class="fas fa-receipt"></i> Rentals
                            </a>
                        </li>
                        <li class="nav-item returns-item">
                            <a class="nav-link" href="#returns" data-bs-toggle="tab">
                                <i class="fas fa-undo"></i> Vehicle Returns
                            </a>
                        </li>
                        <li class="nav-item maintenance-item">
                            <a class="nav-link" href="#maintenance" data-bs-toggle="tab">
                                <i class="fas fa-tools"></i> Vehicle Maintenance
                            </a>
                        </li>
                        <li class="nav-item payments-item">
                            <a class="nav-link" href="#payments" data-bs-toggle="tab">
                                <i class="fas fa-money-bill-wave"></i> Payments
                            </a>
                        </li>
                        <li class="nav-item fines-item">
                            <a class="nav-link" href="#fines" data-bs-toggle="tab">
                                <i class="fas fa-gavel"></i> Fines & Taxes
                            </a>
                        </li>
                        <li class="nav-item reports-item">
                            <a class="nav-link" href="#reports" data-bs-toggle="tab">
                                <i class="fas fa-chart-bar"></i> Reports
                            </a>
                        </li>
                        <li class="nav-item admin-only settings-item">
                            <a class="nav-link" href="#settings" data-bs-toggle="tab">
                                <i class="fas fa-cogs"></i> System Settings
                            </a>
                        </li>
                    </ul>
                    <div class="copyright">
                        Created by Farzad Programmer<br>Not Editable
                    </div>
                </div>

                <!-- Main Content -->
                <div class="col-md-10 ms-sm-auto col-lg-10 px-4">
                    <div class="tab-content mt-4">
                        <!-- Dashboard Tab -->
                        <div class="tab-pane fade show active" id="dashboard">
                            <h2 class="mb-4">Dashboard</h2>
                            <div class="row" id="dashboardStats">
                                <!-- Dashboard statistics will be loaded here -->
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-header">
                                            Recent Rentals
                                        </div>
                                        <div class="card-body">
                                            <div class="table-responsive">
                                                <table class="table table-hover">
                                                    <thead>
                                                        <tr>
                                                            <th>Customer</th>
                                                            <th>Vehicle</th>
                                                            <th>Date</th>
                                                            <th>Amount</th>
                                                            <th>Status</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="recentRentalsTable">
                                                        <!-- Recent rentals will be loaded here -->
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-header">
                                            Vehicle Status
                                        </div>
                                        <div class="card-body">
                                            <canvas id="vehicleStatusChart" width="400" height="200"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Vehicles Tab -->
                        <div class="tab-pane fade" id="vehicles">
                            <h2 class="mb-4">Vehicle Management</h2>
                            
                            <ul class="nav nav-tabs mb-3">
                                <li class="nav-item">
                                    <a class="nav-link active" data-bs-toggle="tab" href="#addVehicle">Add Vehicle</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" data-bs-toggle="tab" href="#vehicleList">Vehicle List</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" data-bs-toggle="tab" href="#vehicleHistory">Vehicle History</a>
                                </li>
                            </ul>
                            
                            <div class="tab-content">
                                <div class="tab-pane fade show active" id="addVehicle">
                                    <div class="card">
                                        <div class="card-header">
                                            Add New Vehicle
                                        </div>
                                        <div class="card-body">
                                            <form id="addVehicleForm">
                                                <div class="row">
                                                    <div class="col-md-6 mb-3">
                                                        <label for="vehicleName" class="form-label">Vehicle Name</label>
                                                        <input type="text" class="form-control" id="vehicleName" required>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="vehicleOdometer" class="form-label">Odometer</label>
                                                        <input type="number" class="form-control" id="vehicleOdometer" required>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6 mb-3">
                                                        <label for="vehicleVin" class="form-label">VIN #</label>
                                                        <input type="text" class="form-control" id="vehicleVin" required>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="vehiclePlate" class="form-label">Plate Number</label>
                                                        <input type="text" class="form-control" id="vehiclePlate" required>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6 mb-3">
                                                        <label for="vehicleColor" class="form-label">Color</label>
                                                        <input type="text" class="form-control" id="vehicleColor" required>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="vehicleModel" class="form-label">Model</label>
                                                        <input type="text" class="form-control" id="vehicleModel" required>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6 mb-3">
                                                        <label for="vehicleRentalPrice" class="form-label">Rental Price (per day)</label>
                                                        <div class="input-group">
                                                            <input type="number" class="form-control" id="vehicleRentalPrice" required>
                                                            <select class="form-select" id="vehicleRentalCurrency" style="max-width: 120px;">
                                                                <option value="USD">USD</option>
                                                                <option value="IQD">IQD</option>
                                                            </select>
                                                        </div>
                                                    </div>
                                                </div>
                                                <button type="submit" class="btn btn-primary">Add Vehicle</button>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="tab-pane fade" id="vehicleList">
                                    <div class="card">
                                        <div class="card-header d-flex justify-content-between align-items-center">
                                            <span>Vehicle List</span>
                                            <div class="input-group" style="width: 300px;">
                                                <input type="text" class="form-control" id="vehicleSearch" placeholder="Search vehicles...">
                                                <button class="btn btn-outline-secondary" type="button" id="vehicleSearchBtn">
                                                    <i class="fas fa-search"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div class="table-responsive">
                                                <table class="table table-hover">
                                                    <thead>
                                                        <tr>
                                                            <th>Name</th>
                                                            <th>Model</th>
                                                            <th>Color</th>
                                                            <th>Plate #</th>
                                                            <th>Odometer</th>
                                                            <th>Rental Price</th>
                                                            <th>Status</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="vehicleTableBody">
                                                        <!-- Vehicle data will be populated here -->
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Vehicle Details Section -->
                                    <div class="card vehicle-details" id="vehicleDetailsCard">
                                        <div class="card-header d-flex justify-content-between align-items-center">
                                            <span>Vehicle Details</span>
                                            <button class="btn btn-sm btn-secondary" id="closeVehicleDetails">Close</button>
                                        </div>
                                        <div class="card-body" id="vehicleDetailsContent">
                                            <!-- Vehicle details will be populated here -->
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="tab-pane fade" id="vehicleHistory">
                                    <div class="card">
                                        <div class="card-header">
                                            Vehicle Rental History
                                        </div>
                                        <div class="card-body">
                                            <div class="table-responsive">
                                                <table class="table table-hover">
                                                    <thead>
                                                        <tr>
                                                            <th>Vehicle</th>
                                                            <th>Customer</th>
                                                            <th>Rental Date</th>
                                                            <th>Return Date</th>
                                                            <th>Amount</th>
                                                            <th>Status</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="vehicleHistoryTableBody">
                                                        <!-- Vehicle history will be populated here -->
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Customers Tab -->
                        <div class="tab-pane fade" id="customers">
                            <h2 class="mb-4">Customer Management</h2>
                            
                            <ul class="nav nav-tabs mb-3">
                                <li class="nav-item">
                                    <a class="nav-link active" data-bs-toggle="tab" href="#addCustomer">Add Customer</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" data-bs-toggle="tab" href="#customerList">Customer List</a>
                                </li>
                            </ul>
                            
                            <div class="tab-content">
                                <div class="tab-pane fade show active" id="addCustomer">
                                    <div class="card">
                                        <div class="card-header">
                                            Add New Customer
                                        </div>
                                        <div class="card-body">
                                            <form id="addCustomerForm">
                                                <div class="row">
                                                    <div class="col-md-6 mb-3">
                                                        <label for="customerFullName" class="form-label">Full Name</label>
                                                        <input type="text" class="form-control" id="customerFullName" required>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="customerAge" class="form-label">Age</label>
                                                        <input type="number" class="form-control" id="customerAge" required>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6 mb-3">
                                                        <label for="customerId" class="form-label">PS/ID</label>
                                                        <input type="text" class="form-control" id="customerId" required>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="customerNationality" class="form-label">Nationality</label>
                                                        <input type="text" class="form-control" id="customerNationality" required>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6 mb-3">
                                                        <label for="customerContact" class="form-label">Contact Number</label>
                                                        <input type="text" class="form-control" id="customerContact" required>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="customerAddress" class="form-label">Address</label>
                                                        <input type="text" class="form-control" id="customerAddress" required>
                                                    </div>
                                                </div>
                                                <div class="mb-3">
                                                    <label for="guaranteeDoc" class="form-label">Guarantee / Document</label>
                                                    <input type="file" class="form-control" id="guaranteeDoc">
                                                </div>
                                                <button type="submit" class="btn btn-primary">Add Customer</button>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="tab-pane fade" id="customerList">
                                    <div class="card">
                                        <div class="card-header d-flex justify-content-between align-items-center">
                                            <span>Customer List</span>
                                            <div class="input-group" style="width: 300px;">
                                                <input type="text" class="form-control" id="customerSearch" placeholder="Search customers...">
                                                <button class="btn btn-outline-secondary" type="button" id="customerSearchBtn">
                                                    <i class="fas fa-search"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div class="table-responsive">
                                                <table class="table table-hover">
                                                    <thead>
                                                        <tr>
                                                            <th>Full Name</th>
                                                            <th>Age</th>
                                                            <th>ID</th>
                                                            <th>Nationality</th>
                                                            <th>Contact</th>
                                                            <th>Total Debt</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="customerTableBody">
                                                        <!-- Customer data will be populated here -->
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Customer Details Section -->
                                    <div class="card customer-details" id="customerDetailsCard">
                                        <div class="card-header d-flex justify-content-between align-items-center">
                                            <span>Customer Details</span>
                                            <button class="btn btn-sm btn-secondary" id="closeCustomerDetails">Close</button>
                                        </div>
                                        <div class="card-body" id="customerDetailsContent">
                                            <!-- Customer details will be populated here -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Rentals Tab -->
                        <div class="tab-pane fade" id="rentals">
                            <h2 class="mb-4">Rental Management</h2>
                            
                            <div class="card">
                                <div class="card-header">
                                    Create New Rental
                                </div>
                                <div class="card-body">
                                    <form id="createRentalForm">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="rentalCustomer" class="form-label">Customer</label>
                                                <input type="text" class="form-control" id="rentalCustomer" placeholder="Search customer...">
                                                <div class="suggestion-list" id="customerSuggestions"></div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="rentalVehicle" class="form-label">Vehicle</label>
                                                <input type="text" class="form-control" id="rentalVehicle" placeholder="Search vehicle...">
                                                <div class="suggestion-list" id="vehicleSuggestions"></div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="rentalAmount" class="form-label">Rental Amount (per day)</label>
                                                <div class="input-group">
                                                    <input type="number" class="form-control" id="rentalAmount" required>
                                                    <select class="form-select" id="rentalCurrency" style="max-width: 120px;">
                                                        <option value="USD">USD</option>
                                                        <option value="IQD">IQD</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="rentalDays" class="form-label">Rental Days</label>
                                                <input type="number" class="form-control" id="rentalDays" required>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="invoiceCode" class="form-label">Invoice Code</label>
                                                <input type="text" class="form-control" id="invoiceCode">
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="exchangeRate" class="form-label">Exchange Rate (USD to IQD)</label>
                                                <input type="number" class="form-control" id="exchangeRate" value="1410" step="0.01">
                                            </div>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Create Rental</button>
                                    </form>
                                </div>
                            </div>
                            
                            <!-- Edit Rental Form -->
                            <div class="card mt-4 edit-rental-form" id="editRentalFormCard">
                                <div class="card-header">
                                    Edit Rental
                                </div>
                                <div class="card-body">
                                    <form id="editRentalForm">
                                        <input type="hidden" id="editRentalId">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="editRentalCustomer" class="form-label">Customer</label>
                                                <input type="text" class="form-control" id="editRentalCustomer" placeholder="Search customer...">
                                                <div class="suggestion-list" id="editCustomerSuggestions"></div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="editRentalVehicle" class="form-label">Vehicle</label>
                                                <input type="text" class="form-control" id="editRentalVehicle" placeholder="Search vehicle...">
                                                <div class="suggestion-list" id="editVehicleSuggestions"></div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="editRentalAmount" class="form-label">Rental Amount (per day)</label>
                                                <div class="input-group">
                                                    <input type="number" class="form-control" id="editRentalAmount" required>
                                                    <select class="form-select" id="editRentalCurrency" style="max-width: 120px;">
                                                        <option value="USD">USD</option>
                                                        <option value="IQD">IQD</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="editRentalDays" class="form-label">Rental Days</label>
                                                <input type="number" class="form-control" id="editRentalDays" required>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="editInvoiceCode" class="form-label">Invoice Code</label>
                                                <input type="text" class="form-control" id="editInvoiceCode">
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="editRentalDate" class="form-label">Rental Date</label>
                                                <input type="date" class="form-control" id="editRentalDate" required>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="editRentalStatus" class="form-label">Status</label>
                                                <select class="form-select" id="editRentalStatus">
                                                    <option value="active">Active</option>
                                                    <option value="completed">Completed</option>
                                                </select>
                                            </div>
                                        </div>
                                        <button type="submit" class="btn btn-warning">Update Rental</button>
                                        <button type="button" class="btn btn-secondary" id="cancelEditRental">Cancel</button>
                                    </form>
                                </div>
                            </div>
                            
                            <div class="card mt-4">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <span>Rental History</span>
                                    <div class="input-group" style="width: 300px;">
                                        <input type="text" class="form-control" id="rentalSearch" placeholder="Search by invoice code...">
                                        <button class="btn btn-outline-secondary" type="button" id="rentalSearchBtn">
                                            <i class="fas fa-search"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Invoice Code</th>
                                                    <th>Customer</th>
                                                    <th>Vehicle</th>
                                                    <th>Date</th>
                                                    <th>Amount</th>
                                                    <th>Status</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="rentalTableBody">
                                                <!-- Rental data will be populated here -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Invoice for Printing -->
                            <div id="invoicePrint" class="print-only" style="display: none;">
                                <div class="invoice-logo">
                                    <img id="printLogo" src="" style="max-width: 200px; display: none;">
                                    <h3 id="printSystemName">Car Rental System</h3>
                                </div>
                                <div class="card">
                                    <div class="card-header text-center">
                                        <h3>Car Rental Invoice</h3>
                                    </div>
                                    <div class="card-body">
                                        <div class="row mb-3">
                                            <div class="col-6">
                                                <strong>Invoice Code:</strong> <span id="printInvoiceCode"></span>
                                            </div>
                                            <div class="col-6 text-end">
                                                <strong>Date:</strong> <span id="printInvoiceDate"></span>
                                            </div>
                                        </div>
                                        <div class="row mb-3">
                                            <div class="col-6">
                                                <strong>Customer:</strong> <span id="printCustomerName"></span>
                                            </div>
                                            <div class="col-6">
                                                <strong>Vehicle:</strong> <span id="printVehicleName"></span>
                                            </div>
                                        </div>
                                        <div class="row mb-3">
                                            <div class="col-6">
                                                <strong>Customer ID:</strong> <span id="printCustomerId"></span>
                                            </div>
                                            <div class="col-6">
                                                <strong>Customer Address:</strong> <span id="printCustomerAddress"></span>
                                            </div>
                                        </div>
                                        <div class="row mb-3">
                                            <div class="col-12">
                                                <strong>Rental Amount (per day):</strong> <span id="printRentalAmount"></span>
                                            </div>
                                        </div>
                                        <div class="row mb-3">
                                            <div class="col-12">
                                                <strong>Rental Days:</strong> <span id="printRentalDays"></span>
                                            </div>
                                        </div>
                                        <div class="row mb-3">
                                            <div class="col-12">
                                                <strong>Rental History:</strong>
                                                <div id="printRentalHistory"></div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-12">
                                                <hr>
                                                <h4 class="text-end">Total: <span id="printTotalAmount"></span></h4>
                                            </div>
                                        </div>
                                        <div class="row signature-area">
                                            <div class="col-6">
                                                <strong>Customer Signature:</strong>
                                                <div style="height: 50px; border-bottom: 1px solid #000;"></div>
                                            </div>
                                            <div class="col-6 text-end">
                                                <strong>Company Signature:</strong>
                                                <div style="height: 50px; border-bottom: 1px solid #000;"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Vehicle Returns Tab -->
                        <div class="tab-pane fade" id="returns">
                            <h2 class="mb-4">Vehicle Returns</h2>
                            
                            <div class="card">
                                <div class="card-header">
                                    Return Vehicle
                                </div>
                                <div class="card-body">
                                    <form id="returnVehicleForm">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="returnRental" class="form-label">Select Rental</label>
                                                <select class="form-select" id="returnRental" required>
                                                    <option value="">Select a rental...</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="returnDate" class="form-label">Return Date</label>
                                                <input type="date" class="form-control" id="returnDate" required>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="returnOdometer" class="form-label">Odometer Reading</label>
                                                <input type="number" class="form-control" id="returnOdometer" required>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="returnCondition" class="form-label">Vehicle Condition</label>
                                                <select class="form-select" id="returnCondition" required>
                                                    <option value="excellent">Excellent</option>
                                                    <option value="good">Good</option>
                                                    <option value="fair">Fair</option>
                                                    <option value="poor">Poor</option>
                                                    <option value="damaged">Damaged</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12 mb-3">
                                                <label for="returnNotes" class="form-label">Notes</label>
                                                <textarea class="form-control" id="returnNotes" rows="3"></textarea>
                                            </div>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Process Return</button>
                                    </form>
                                </div>
                            </div>
                            
                            <div class="card mt-4">
                                <div class="card-header">
                                    Return History
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Customer</th>
                                                    <th>Vehicle</th>
                                                    <th>Rental Date</th>
                                                    <th>Return Date</th>
                                                    <th>Odometer</th>
                                                    <th>Condition</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="returnHistoryTableBody">
                                                <!-- Return history will be populated here -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Vehicle Maintenance Tab -->
                        <div class="tab-pane fade" id="maintenance">
                            <h2 class="mb-4">Vehicle Maintenance</h2>
                            
                            <div class="card">
                                <div class="card-header">
                                    Schedule Maintenance
                                </div>
                                <div class="card-body">
                                    <form id="scheduleMaintenanceForm">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="maintenanceVehicle" class="form-label">Vehicle</label>
                                                <select class="form-select" id="maintenanceVehicle" required>
                                                    <option value="">Select a vehicle...</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="maintenanceType" class="form-label">Maintenance Type</label>
                                                <select class="form-select" id="maintenanceType" required>
                                                    <option value="oil_change">Oil Change</option>
                                                    <option value="tire_rotation">Tire Rotation</option>
                                                    <option value="brake_service">Brake Service</option>
                                                    <option value="engine_check">Engine Check</option>
                                                    <option value="other">Other</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="maintenanceDate" class="form-label">Scheduled Date</label>
                                                <input type="date" class="form-control" id="maintenanceDate" required>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="maintenanceCost" class="form-label">Cost</label>
                                                <div class="input-group">
                                                    <input type="number" class="form-control" id="maintenanceCost">
                                                    <select class="form-select" id="maintenanceCurrency" style="max-width: 120px;">
                                                        <option value="USD">USD</option>
                                                        <option value="IQD">IQD</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12 mb-3">
                                                <label for="maintenanceDescription" class="form-label">Description</label>
                                                <textarea class="form-control" id="maintenanceDescription" rows="3"></textarea>
                                            </div>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Schedule Maintenance</button>
                                    </form>
                                </div>
                            </div>
                            
                            <div class="card mt-4">
                                <div class="card-header">
                                    Maintenance History
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Vehicle</th>
                                                    <th>Type</th>
                                                    <th>Scheduled Date</th>
                                                    <th>Cost</th>
                                                    <th>Status</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="maintenanceHistoryTableBody">
                                                <!-- Maintenance history will be populated here -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Payments Tab -->
                        <div class="tab-pane fade" id="payments">
                            <h2 class="mb-4">Payment Management</h2>
                            
                            <div class="card">
                                <div class="card-header">
                                    Record Payment
                                </div>
                                <div class="card-body">
                                    <form id="recordPaymentForm">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="paymentCustomer" class="form-label">Customer</label>
                                                <select class="form-select" id="paymentCustomer" required>
                                                    <option value="">Select a customer...</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="paymentRental" class="form-label">Rental</label>
                                                <select class="form-select" id="paymentRental" required>
                                                    <option value="">Select a rental...</option>
                                                    <option value="none">None (Direct Payment)</option>
                                                    <option value="debt">Debt Payment</option>
                                                    <option value="fine">Fine Payment</option>
                                                    <option value="other">Other</option>
                                                    </select>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="paymentAmount" class="form-label">Amount</label>
                                                <div class="input-group">
                                                    <input type="number" class="form-control" id="paymentAmount" required>
                                                    <select class="form-select" id="paymentCurrency" style="max-width: 120px;">
                                                        <option value="USD">USD</option>
                                                        <option value="IQD">IQD</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="paymentDate" class="form-label">Payment Date</label>
                                                <input type="date" class="form-control" id="paymentDate" required>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="paymentMethod" class="form-label">Payment Method</label>
                                                <select class="form-select" id="paymentMethod" required>
                                                    <option value="cash">Cash</option>
                                                    <option value="card">Credit Card</option>
                                                    <option value="bank_transfer">Bank Transfer</option>
                                                    <option value="other">Other</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="paymentType" class="form-label">Payment Type</label>
                                                <select class="form-select" id="paymentType" required>
                                                    <option value="rental">Rental Payment</option>
                                                    <option value="fine">Fine Payment</option>
                                                    <option value="debt">Debt Payment</option>
                                                    <option value="other">Other</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12 mb-3">
                                                <label for="paymentNotes" class="form-label">Notes</label>
                                                <textarea class="form-control" id="paymentNotes" rows="3"></textarea>
                                            </div>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Record Payment</button>
                                    </form>
                                </div>
                            </div>
                            
                            <div class="card mt-4">
                                <div class="card-header">
                                    Payment History
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Customer</th>
                                                    <th>Type</th>
                                                    <th>Amount</th>
                                                    <th>Date</th>
                                                    <th>Method</th>
                                                    <th>Notes</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="paymentHistoryTableBody">
                                                <!-- Payment history will be populated here -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Fines & Taxes Tab -->
                        <div class="tab-pane fade" id="fines">
                            <h2 class="mb-4">Fines & Taxes</h2>
                            
                            <div class="card">
                                <div class="card-header">
                                    Add Fine or Tax
                                </div>
                                <div class="card-body">
                                    <form id="addFineForm">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="fineCustomer" class="form-label">Customer</label>
                                                <select class="form-select" id="fineCustomer" required>
                                                    <option value="">Select a customer...</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="fineType" class="form-label">Type</label>
                                                <select class="form-select" id="fineType" required>
                                                    <option value="traffic_fine">Traffic Fine</option>
                                                    <option value="late_return">Late Return</option>
                                                    <option value="damage">Damage Fee</option>
                                                    <option value="cleaning">Cleaning Fee</option>
                                                    <option value="tax">Tax</option>
                                                    <option value="other">Other</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="fineAmount" class="form-label">Amount</label>
                                                <div class="input-group">
                                                    <input type="number" class="form-control" id="fineAmount" required>
                                                    <select class="form-select" id="fineCurrency" style="max-width: 120px;">
                                                        <option value="USD">USD</option>
                                                        <option value="IQD">IQD</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="fineDate" class="form-label">Date</label>
                                                <input type="date" class="form-control" id="fineDate" required>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12 mb-3">
                                                <label for="fineDescription" class="form-label">Description</label>
                                                <textarea class="form-control" id="fineDescription" rows="3"></textarea>
                                            </div>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Add Fine/Tax</button>
                                    </form>
                                </div>
                            </div>
                            
                            <div class="card mt-4">
                                <div class="card-header">
                                    Fines & Taxes History
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Customer</th>
                                                    <th>Type</th>
                                                    <th>Amount</th>
                                                    <th>Date</th>
                                                    <th>Description</th>
                                                    <th>Status</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="finesHistoryTableBody">
                                                <!-- Fines history will be populated here -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Reports Tab -->
                        <div class="tab-pane fade" id="reports">
                            <h2 class="mb-4">Reports</h2>
                            
                            <div class="card">
                                <div class="card-header">
                                    Generate Report
                                </div>
                                <div class="card-body">
                                    <form id="reportForm">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="reportType" class="form-label">Report Type</label>
                                                <select class="form-select" id="reportType" required>
                                                    <option value="rental">Rental Report</option>
                                                    <option value="payment">Payment Report</option>
                                                    <option value="vehicle">Vehicle Report</option>
                                                    <option value="customer">Customer Report</option>
                                                    <option value="maintenance">Maintenance Report</option>
                                                    <option value="fines">Fines Report</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="reportPeriod" class="form-label">Period</label>
                                                <select class="form-select" id="reportPeriod" required>
                                                    <option value="today">Today</option>
                                                    <option value="yesterday">Yesterday</option>
                                                    <option value="this_week">This Week</option>
                                                    <option value="last_week">Last Week</option>
                                                    <option value="this_month">This Month</option>
                                                    <option value="last_month">Last Month</option>
                                                    <option value="custom">Custom Range</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row" id="customDateRange" style="display: none;">
                                            <div class="col-md-6 mb-3">
                                                <label for="startDate" class="form-label">Start Date</label>
                                                <input type="date" class="form-control" id="startDate">
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="endDate" class="form-label">End Date</label>
                                                <input type="date" class="form-control" id="endDate">
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12 mb-3">
                                                <label for="reportFormat" class="form-label">Export Format</label>
                                                <div>
                                                    <div class="form-check form-check-inline">
                                                        <input class="form-check-input" type="radio" name="reportFormat" id="formatPDF" value="pdf" checked>
                                                        <label class="form-check-label" for="formatPDF">PDF</label>
                                                    </div>
                                                    <div class="form-check form-check-inline">
                                                        <input class="form-check-input" type="radio" name="reportFormat" id="formatExcel" value="excel">
                                                        <label class="form-check-label" for="formatExcel">Excel</label>
                                                    </div>
                                                    <div class="form-check form-check-inline">
                                                        <input class="form-check-input" type="radio" name="reportFormat" id="formatPrint" value="print">
                                                        <label class="form-check-label" for="formatPrint">Print</label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Generate Report</button>
                                    </form>
                                </div>
                            </div>
                            
                            <div class="card mt-4">
                                <div class="card-header">
                                    Report Results
                                </div>
                                <div class="card-body">
                                    <div id="reportResults">
                                        <p class="text-muted">No report generated yet. Select parameters and click "Generate Report".</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- System Settings Tab -->
                        <div class="tab-pane fade" id="settings">
                            <h2 class="mb-4">System Settings</h2>
                            
                            <div class="card">
                                <div class="card-header">
                                    General Settings
                                </div>
                                <div class="card-body">
                                    <form id="generalSettingsForm">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="systemName" class="form-label">System Name</label>
                                                <input type="text" class="form-control" id="systemName" value="Car Rental System">
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="systemCurrency" class="form-label">Default Currency</label>
                                                <select class="form-select" id="systemCurrency">
                                                    <option value="USD">USD</option>
                                                    <option value="IQD">IQD</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="exchangeRate" class="form-label">Default Exchange Rate (USD to IQD)</label>
                                                <input type="number" class="form-control" id="systemExchangeRate" value="1410" step="0.01">
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="systemLogo" class="form-label">System Logo</label>
                                                <input type="file" class="form-control" id="systemLogo" accept="image/*">
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12 mb-3">
                                                <label for="systemAddress" class="form-label">Company Address</label>
                                                <textarea class="form-control" id="systemAddress" rows="3"></textarea>
                                            </div>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Save Settings</button>
                                    </form>
                                </div>
                            </div>
                            
                            <div class="card mt-4">
                                <div class="card-header">
                                    Database Management
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <h5>Database Information</h5>
                                            <p>Current Database Size: <span id="dbSize">0 MB</span></p>
                                            <p>Maximum Database Size: <span id="maxDbSize">10 GB</span></p>
                                            <div class="progress mb-3">
                                                <div class="progress-bar" id="dbUsageBar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                                            </div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <h5>Database Actions</h5>
                                            <button class="btn btn-outline-primary me-2 mb-2" id="backupDbBtn">
                                                <i class="fas fa-download"></i> Backup Database
                                            </button>
                                            <button class="btn btn-outline-warning me-2 mb-2" id="optimizeDbBtn">
                                                <i class="fas fa-tools"></i> Optimize Database
                                            </button>
                                            <button class="btn btn-outline-danger mb-2" id="clearDbBtn">
                                                <i class="fas fa-trash"></i> Clear Old Data
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Change Password Modal -->
    <div class="modal fade" id="changePasswordModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Change Password</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="changePasswordForm">
                        <div class="mb-3">
                            <label for="currentPassword" class="form-label">Current Password</label>
                            <input type="password" class="form-control" id="currentPassword" required>
                        </div>
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">New Password</label>
                            <input type="password" class="form-control" id="newPassword" required>
                        </div>
                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm New Password</label>
                            <input type="password" class="form-control" id="confirmPassword" required>
                        </div>
                        <button type="submit" class="btn btn-primary">Change Password</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- User Management Modal -->
    <div class="modal fade" id="userManagementModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">User Management</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Username</th>
                                    <th>Role</th>
                                    <th>Last Login</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="userTableBody">
                                <!-- User data will be populated here -->
                            </tbody>
                        </table>
                    </div>
                    <button class="btn btn-primary mt-3" id="addUserBtn">
                        <i class="fas fa-plus"></i> Add User
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add User Modal -->
    <div class="modal fade" id="addUserModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addUserForm">
                        <div class="mb-3">
                            <label for="newUsername" class="form-label">Username</label>
                            <input type="text" class="form-control" id="newUsername" required>
                        </div>
                        <div class="mb-3">
                            <label for="newUserPassword" class="form-label">Password</label>
                            <input type="password" class="form-control" id="newUserPassword" required>
                        </div>
                        <div class="mb-3">
                            <label for="newUserRole" class="form-label">Role</label>
                            <select class="form-select" id="newUserRole" required>
                                <option value="admin">Admin</option>
                                <option value="user">User</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">Add User</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript Libraries -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    
    <!-- Main Application Script -->
    <script>
        // Global variables
        let currentUser = null;
        
        // Initialize default data
        function initializeDefaultData() {
            // Check if data already exists
            if (!localStorage.getItem('users')) {
                const defaultUsers = [
                    { username: 'admin', password: '000000', role: 'admin', lastLogin: null }
                ];
                localStorage.setItem('users', JSON.stringify(defaultUsers));
            }
            
            if (!localStorage.getItem('vehicles')) {
                const defaultVehicles = [
                    { 
                        id: 'v1', 
                        name: 'Toyota Camry', 
                        model: '2022', 
                        color: 'White', 
                        plate: 'ABC123', 
                        vin: '1HGCM82633A123456', 
                        odometer: 15000, 
                        rentalPrice: 50,
                        rentalCurrency: 'USD',
                        status: 'available',
                        dateAdded: new Date().toISOString()
                    },
                    { 
                        id: 'v2', 
                        name: 'Honda Civic', 
                        model: '2021', 
                        color: 'Black', 
                        plate: 'XYZ789', 
                        vin: '2HGCM82633A654321', 
                        odometer: 22000, 
                        rentalPrice: 45,
                        rentalCurrency: 'USD',
                        status: 'available',
                        dateAdded: new Date().toISOString()
                    }
                ];
                localStorage.setItem('vehicles', JSON.stringify(defaultVehicles));
            }
            
            if (!localStorage.getItem('customers')) {
                const defaultCustomers = [
                    { 
                        id: 'c1', 
                        fullName: 'Ahmed Hassan', 
                        age: 35, 
                        idNumber: '123456789', 
                        nationality: 'Iraqi', 
                        contact: '07701234567', 
                        address: 'Baghdad, Karrada',
                        totalDebt: 0,
                        dateAdded: new Date().toISOString()
                    },
                    { 
                        id: 'c2', 
                        fullName: 'Sarah Mohammed', 
                        age: 28, 
                        idNumber: '987654321', 
                        nationality: 'Iraqi', 
                        contact: '07707654321', 
                        address: 'Erbil, Ainkawa',
                        totalDebt: 0,
                        dateAdded: new Date().toISOString()
                    }
                ];
                localStorage.setItem('customers', JSON.stringify(defaultCustomers));
            }
            
            if (!localStorage.getItem('settings')) {
                const defaultSettings = {
                    systemName: 'Car Rental System',
                    defaultCurrency: 'USD',
                    exchangeRate: 1410,
                    companyAddress: ''
                };
                localStorage.setItem('settings', JSON.stringify(defaultSettings));
            }
            
            // Initialize empty arrays for other data if they don't exist
            if (!localStorage.getItem('rentals')) localStorage.setItem('rentals', JSON.stringify([]));
            if (!localStorage.getItem('returns')) localStorage.setItem('returns', JSON.stringify([]));
            if (!localStorage.getItem('maintenance')) localStorage.setItem('maintenance', JSON.stringify([]));
            if (!localStorage.getItem('payments')) localStorage.setItem('payments', JSON.stringify([]));
            if (!localStorage.getItem('fines')) localStorage.setItem('fines', JSON.stringify([]));
        }
        
        // Get data from localStorage
        function getData() {
            return {
                users: JSON.parse(localStorage.getItem('users')) || [],
                vehicles: JSON.parse(localStorage.getItem('vehicles')) || [],
                customers: JSON.parse(localStorage.getItem('customers')) || [],
                rentals: JSON.parse(localStorage.getItem('rentals')) || [],
                returns: JSON.parse(localStorage.getItem('returns')) || [],
                maintenance: JSON.parse(localStorage.getItem('maintenance')) || [],
                payments: JSON.parse(localStorage.getItem('payments')) || [],
                fines: JSON.parse(localStorage.getItem('fines')) || [],
                settings: JSON.parse(localStorage.getItem('settings')) || {
                    systemName: 'Car Rental System',
                    defaultCurrency: 'USD',
                    exchangeRate: 1410,
                    companyAddress: ''
                }
            };
        }
        
        // Save data to localStorage
        function saveData(key, data) {
            localStorage.setItem(key, JSON.stringify(data));
        }
        
        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize default data
            initializeDefaultData();
            
            // Check if user is already logged in
            const loggedInUser = localStorage.getItem('loggedInUser');
            if (loggedInUser) {
                currentUser = JSON.parse(loggedInUser);
                showMainApp();
            }
            
            // Login form submission
            document.getElementById('loginForm').addEventListener('submit', function(e) {
                e.preventDefault();
                const username = document.getElementById('username').value;
                const password = document.getElementById('password').value;
                
                const data = getData();
                const user = data.users.find(u => u.username === username && u.password === password);
                
                if (user) {
                    user.lastLogin = new Date().toISOString();
                    currentUser = user;
                    saveData('loggedInUser', JSON.stringify(user));
                    saveData('users', data.users);
                    showMainApp();
                } else {
                    alert('Invalid username or password');
                }
            });
            
            // Logout button
            document.getElementById('logoutBtn').addEventListener('click', function() {
                localStorage.removeItem('loggedInUser');
                currentUser = null;
                document.getElementById('mainApp').style.display = 'none';
                document.getElementById('loginScreen').style.display = 'block';
                document.getElementById('loginForm').reset();
            });
            
            // Initialize settings
            initializeSettings();
            
            // Initialize dashboard
            initializeDashboard();
            
            // Initialize forms
            initializeForms();
            
            // Initialize data tables
            loadVehicleTable();
            loadCustomerTable();
            loadRentalTable();
            loadReturnTable();
            loadMaintenanceTable();
            loadPaymentTable();
            loadFinesTable();
            
            // Initialize report form
            document.getElementById('reportPeriod').addEventListener('change', function() {
                if (this.value === 'custom') {
                    document.getElementById('customDateRange').style.display = 'flex';
                } else {
                    document.getElementById('customDateRange').style.display = 'none';
                }
            });
            
            // Initialize user management
            if (currentUser && currentUser.role === 'admin') {
                loadUserTable();
            }
            
            // Initialize database info
            updateDatabaseInfo();
        });
        
        // Show main application after login
        function showMainApp() {
            document.getElementById('loginScreen').style.display = 'none';
            document.getElementById('mainApp').style.display = 'block';
            document.getElementById('currentUser').textContent = currentUser.username;
            
            // Show/hide admin-only elements
            const adminElements = document.querySelectorAll('.admin-only');
            if (currentUser.role === 'admin') {
                adminElements.forEach(el => el.style.display = 'block');
            } else {
                adminElements.forEach(el => el.style.display = 'none');
            }
            
            // Initialize all components
            initializeDashboard();
            loadVehicleTable();
            loadCustomerTable();
            loadRentalTable();
            loadReturnTable();
            loadMaintenanceTable();
            loadPaymentTable();
            loadFinesTable();
            populateReturnRentalDropdown();
            populatePaymentCustomerDropdown();
            populateFineCustomerDropdown();
            populateMaintenanceVehicleDropdown();
        }
        
        // Initialize system settings
        function initializeSettings() {
            const data = getData();
            const settings = data.settings;
            
            document.getElementById('systemName').value = settings.systemName;
            document.getElementById('systemCurrency').value = settings.defaultCurrency;
            document.getElementById('systemExchangeRate').value = settings.exchangeRate;
            document.getElementById('systemAddress').value = settings.companyAddress;
            
            // Update system name in UI
            document.getElementById('headerSystemName').textContent = settings.systemName;
            document.getElementById('sidebarSystemName').textContent = settings.systemName;
            
            // Load logo if exists
            if (settings.logo) {
                document.getElementById('headerLogo').src = settings.logo;
                document.getElementById('headerLogo').style.display = 'inline';
                document.getElementById('sidebarLogo').src = settings.logo;
                document.getElementById('sidebarLogo').style.display = 'block';
                document.getElementById('printLogo').src = settings.logo;
                document.getElementById('printLogo').style.display = 'inline';
            }
        }
        
        // Initialize dashboard
        function initializeDashboard() {
            const data = getData();
            const vehicles = data.vehicles;
            const customers = data.customers;
            const rentals = data.rentals;
            const payments = data.payments;
            
            // Calculate dashboard statistics
            const totalVehicles = vehicles.length;
            const availableVehicles = vehicles.filter(v => v.status === 'available').length;
            const rentedVehicles = vehicles.filter(v => v.status === 'rented').length;
            const totalCustomers = customers.length;
            const activeRentals = rentals.filter(r => r.status === 'active').length;
            
            // Calculate total payment (formerly total rental revenue)
            const totalPayment = payments.reduce((sum, payment) => {
                if (payment.currency === 'IQD') {
                    return sum + (payment.amount / data.settings.exchangeRate);
                }
                return sum + payment.amount;
            }, 0);
            
            // Update dashboard stats
            document.getElementById('dashboardStats').innerHTML = `
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card dashboard-card border-left-primary shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Total Vehicles</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">${totalVehicles}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-car fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card dashboard-card border-left-success shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Available Vehicles</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">${availableVehicles}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card dashboard-card border-left-info shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Active Rentals</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">${activeRentals}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-receipt fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card dashboard-card border-left-warning shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Total Payment</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">$${totalPayment.toFixed(2)}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Load recent rentals
            const recentRentals = rentals.slice(-5).reverse();
            document.getElementById('recentRentalsTable').innerHTML = recentRentals.map(rental => {
                const customer = customers.find(c => c.id === rental.customerId);
                const vehicle = vehicles.find(v => v.id === rental.vehicleId);
                const amount = rental.currency === 'IQD' ? 
                    `IQD ${rental.amount.toLocaleString()}` : 
                    `$${rental.amount.toFixed(2)}`;
                
                return `
                    <tr>
                        <td>${customer ? customer.fullName : 'N/A'}</td>
                        <td>${vehicle ? vehicle.name : 'N/A'}</td>
                        <td>${new Date(rental.date).toLocaleDateString()}</td>
                        <td>${amount}</td>
                        <td><span class="badge ${rental.status === 'active' ? 'bg-success' : 'bg-secondary'}">${rental.status}</span></td>
                    </tr>
                `;
            }).join('');
            
            // Initialize vehicle status chart
            const ctx = document.getElementById('vehicleStatusChart').getContext('2d');
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Available', 'Rented', 'Maintenance'],
                    datasets: [{
                        data: [
                            availableVehicles,
                            rentedVehicles,
                            vehicles.filter(v => v.status === 'maintenance').length
                        ],
                        backgroundColor: [
                            '#28a745',
                            '#007bff',
                            '#ffc107'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }
        
        // Initialize form event listeners
        function initializeForms() {
            // Add vehicle form
            document.getElementById('addVehicleForm').addEventListener('submit', function(e) {
                e.preventDefault();
                addVehicle();
            });
            
            // Add customer form
            document.getElementById('addCustomerForm').addEventListener('submit', function(e) {
                e.preventDefault();
                addCustomer();
            });
            
            // Create rental form
            document.getElementById('createRentalForm').addEventListener('submit', function(e) {
                e.preventDefault();
                createRental();
            });
            
            // Edit rental form
            document.getElementById('editRentalForm').addEventListener('submit', function(e) {
                e.preventDefault();
                updateRental();
            });
            
            // Return vehicle form
            document.getElementById('returnVehicleForm').addEventListener('submit', function(e) {
                e.preventDefault();
                returnVehicle();
            });
            
            // Schedule maintenance form
            document.getElementById('scheduleMaintenanceForm').addEventListener('submit', function(e) {
                e.preventDefault();
                scheduleMaintenance();
            });
            
            // Record payment form
            document.getElementById('recordPaymentForm').addEventListener('submit', function(e) {
                e.preventDefault();
                recordPayment();
            });
            
            // Add fine form
            document.getElementById('addFineForm').addEventListener('submit', function(e) {
                e.preventDefault();
                addFine();
            });
            
            // Report form
            document.getElementById('reportForm').addEventListener('submit', function(e) {
                e.preventDefault();
                generateReport();
            });
            
            // General settings form
            document.getElementById('generalSettingsForm').addEventListener('submit', function(e) {
                e.preventDefault();
                saveSettings();
            });
            
            // Change password form
            document.getElementById('changePasswordForm').addEventListener('submit', function(e) {
                e.preventDefault();
                changePassword();
            });
            
            // Add user form
            document.getElementById('addUserForm').addEventListener('submit', function(e) {
                e.preventDefault();
                addUser();
            });
            
            // Vehicle search
            document.getElementById('vehicleSearchBtn').addEventListener('click', function() {
                searchVehicles();
            });
            
            // Customer search
            document.getElementById('customerSearchBtn').addEventListener('click', function() {
                searchCustomers();
            });
            
            // Rental search
            document.getElementById('rentalSearchBtn').addEventListener('click', function() {
                searchRentals();
            });
            
            // Customer suggestions for rental
            document.getElementById('rentalCustomer').addEventListener('input', function() {
                showCustomerSuggestions(this.value, 'customerSuggestions');
            });
            
            // Vehicle suggestions for rental
            document.getElementById('rentalVehicle').addEventListener('input', function() {
                showVehicleSuggestions(this.value, 'vehicleSuggestions');
            });
            
            // Customer suggestions for edit rental
            document.getElementById('editRentalCustomer').addEventListener('input', function() {
                showCustomerSuggestions(this.value, 'editCustomerSuggestions');
            });
            
            // Vehicle suggestions for edit rental
            document.getElementById('editRentalVehicle').addEventListener('input', function() {
                showVehicleSuggestions(this.value, 'editVehicleSuggestions');
            });
            
            // Close vehicle details
            document.getElementById('closeVehicleDetails').addEventListener('click', function() {
                document.getElementById('vehicleDetailsCard').style.display = 'none';
            });
            
            // Close customer details
            document.getElementById('closeCustomerDetails').addEventListener('click', function() {
                document.getElementById('customerDetailsCard').style.display = 'none';
            });
            
            // Cancel edit rental
            document.getElementById('cancelEditRental').addEventListener('click', function() {
                document.getElementById('editRentalFormCard').style.display = 'none';
            });
            
            // Add user button
            document.getElementById('addUserBtn').addEventListener('click', function() {
                new bootstrap.Modal(document.getElementById('addUserModal')).show();
            });
            
            // Database buttons
            document.getElementById('backupDbBtn').addEventListener('click', backupDatabase);
            document.getElementById('optimizeDbBtn').addEventListener('click', optimizeDatabase);
            document.getElementById('clearDbBtn').addEventListener('click', clearOldData);
            
            // Populate rental dropdown for returns
            populateReturnRentalDropdown();
            
            // Populate customer dropdown for payments
            populatePaymentCustomerDropdown();
            
            // Populate customer dropdown for fines
            populateFineCustomerDropdown();
            
            // Populate vehicle dropdown for maintenance
            populateMaintenanceVehicleDropdown();
        }
        
        // Add a new vehicle
        function addVehicle() {
            const data = getData();
            
            const vehicle = {
                id: generateId(),
                name: document.getElementById('vehicleName').value,
                odometer: parseInt(document.getElementById('vehicleOdometer').value),
                vin: document.getElementById('vehicleVin').value,
                plate: document.getElementById('vehiclePlate').value,
                color: document.getElementById('vehicleColor').value,
                model: document.getElementById('vehicleModel').value,
                rentalPrice: parseFloat(document.getElementById('vehicleRentalPrice').value),
                rentalCurrency: document.getElementById('vehicleRentalCurrency').value,
                status: 'available',
                dateAdded: new Date().toISOString()
            };
            
            data.vehicles.push(vehicle);
            saveData('vehicles', data.vehicles);
            
            alert('Vehicle added successfully!');
            document.getElementById('addVehicleForm').reset();
            loadVehicleTable();
            initializeDashboard();
            populateMaintenanceVehicleDropdown();
        }
        
        // Add a new customer
        function addCustomer() {
            const data = getData();
            
            const customer = {
                id: generateId(),
                fullName: document.getElementById('customerFullName').value,
                age: parseInt(document.getElementById('customerAge').value),
                idNumber: document.getElementById('customerId').value,
                nationality: document.getElementById('customerNationality').value,
                contact: document.getElementById('customerContact').value,
                address: document.getElementById('customerAddress').value,
                dateAdded: new Date().toISOString(),
                totalDebt: 0
            };
            
            data.customers.push(customer);
            saveData('customers', data.customers);
            
            alert('Customer added successfully!');
            document.getElementById('addCustomerForm').reset();
            loadCustomerTable();
            populatePaymentCustomerDropdown();
            populateFineCustomerDropdown();
        }
        
        // Create a new rental
        function createRental() {
            const data = getData();
            
            const customerInput = document.getElementById('rentalCustomer').value;
            const vehicleInput = document.getElementById('rentalVehicle').value;
            
            // Find customer and vehicle by name
            const customer = data.customers.find(c => c.fullName === customerInput);
            const vehicle = data.vehicles.find(v => v.name === vehicleInput);
            
            if (!customer) {
                alert('Customer not found!');
                return;
            }
            
            if (!vehicle) {
                alert('Vehicle not found!');
                return;
            }
            
            if (vehicle.status !== 'available') {
                alert('Vehicle is not available for rental!');
                return;
            }
            
            const rental = {
                id: generateId(),
                customerId: customer.id,
                vehicleId: vehicle.id,
                amount: parseFloat(document.getElementById('rentalAmount').value),
                currency: document.getElementById('rentalCurrency').value,
                days: parseInt(document.getElementById('rentalDays').value),
                invoiceCode: document.getElementById('invoiceCode').value || `INV-${Date.now()}`,
                exchangeRate: parseFloat(document.getElementById('exchangeRate').value),
                date: new Date().toISOString(),
                status: 'active'
            };
            
            data.rentals.push(rental);
            saveData('rentals', data.rentals);
            
            // Update vehicle status
            vehicle.status = 'rented';
            saveData('vehicles', data.vehicles);
            
            alert('Rental created successfully!');
            document.getElementById('createRentalForm').reset();
            loadRentalTable();
            initializeDashboard();
            populateReturnRentalDropdown();
        }
        
        // Edit rental
        function editRental(rentalId) {
            const data = getData();
            const rental = data.rentals.find(r => r.id === rentalId);
            if (!rental) return;
            
            const customer = data.customers.find(c => c.id === rental.customerId);
            const vehicle = data.vehicles.find(v => v.id === rental.vehicleId);
            
            document.getElementById('editRentalId').value = rental.id;
            document.getElementById('editRentalCustomer').value = customer ? customer.fullName : '';
            document.getElementById('editRentalVehicle').value = vehicle ? vehicle.name : '';
            document.getElementById('editRentalAmount').value = rental.amount;
            document.getElementById('editRentalCurrency').value = rental.currency;
            document.getElementById('editRentalDays').value = rental.days;
            document.getElementById('editInvoiceCode').value = rental.invoiceCode;
            document.getElementById('editRentalDate').value = rental.date.split('T')[0];
            document.getElementById('editRentalStatus').value = rental.status;
            
            document.getElementById('editRentalFormCard').style.display = 'block';
        }
        
        // Update rental
        function updateRental() {
            const data = getData();
            const rentalId = document.getElementById('editRentalId').value;
            const rental = data.rentals.find(r => r.id === rentalId);
            if (!rental) return;
            
            const customerInput = document.getElementById('editRentalCustomer').value;
            const vehicleInput = document.getElementById('editRentalVehicle').value;
            
            // Find customer and vehicle by name
            const customer = data.customers.find(c => c.fullName === customerInput);
            const vehicle = data.vehicles.find(v => v.name === vehicleInput);
            
            if (!customer) {
                alert('Customer not found!');
                return;
            }
            
            if (!vehicle) {
                alert('Vehicle not found!');
                return;
            }
            
            // If vehicle changed, update status of old and new vehicle
            if (rental.vehicleId !== vehicle.id) {
                const oldVehicle = data.vehicles.find(v => v.id === rental.vehicleId);
                if (oldVehicle) {
                    oldVehicle.status = 'available';
                }
                vehicle.status = 'rented';
            }
            
            rental.customerId = customer.id;
            rental.vehicleId = vehicle.id;
            rental.amount = parseFloat(document.getElementById('editRentalAmount').value);
            rental.currency = document.getElementById('editRentalCurrency').value;
            rental.days = parseInt(document.getElementById('editRentalDays').value);
            rental.invoiceCode = document.getElementById('editInvoiceCode').value;
            rental.date = document.getElementById('editRentalDate').value;
            rental.status = document.getElementById('editRentalStatus').value;
            
            saveData('rentals', data.rentals);
            saveData('vehicles', data.vehicles);
            
            alert('Rental updated successfully!');
            document.getElementById('editRentalFormCard').style.display = 'none';
            loadRentalTable();
            initializeDashboard();
            populateReturnRentalDropdown();
        }
        
        // Return a vehicle
        function returnVehicle() {
            const data = getData();
            const rentalId = document.getElementById('returnRental').value;
            const rental = data.rentals.find(r => r.id === rentalId);
            
            if (!rental) {
                alert('Please select a valid rental!');
                return;
            }
            
            const vehicle = data.vehicles.find(v => v.id === rental.vehicleId);
            if (!vehicle) {
                alert('Vehicle not found!');
                return;
            }
            
            const returnRecord = {
                id: generateId(),
                rentalId: rental.id,
                returnDate: document.getElementById('returnDate').value,
                odometer: parseInt(document.getElementById('returnOdometer').value),
                condition: document.getElementById('returnCondition').value,
                notes: document.getElementById('returnNotes').value,
                dateProcessed: new Date().toISOString()
            };
            
            data.returns.push(returnRecord);
            saveData('returns', data.returns);
            
            // Update rental status
            rental.status = 'completed';
            saveData('rentals', data.rentals);
            
            // Update vehicle status and odometer
            vehicle.status = 'available';
            vehicle.odometer = returnRecord.odometer;
            saveData('vehicles', data.vehicles);
            
            alert('Vehicle returned successfully!');
            document.getElementById('returnVehicleForm').reset();
            loadReturnTable();
            initializeDashboard();
            populateReturnRentalDropdown();
        }
        
        // Schedule maintenance
        function scheduleMaintenance() {
            const data = getData();
            
            const maintenanceRecord = {
                id: generateId(),
                vehicleId: document.getElementById('maintenanceVehicle').value,
                type: document.getElementById('maintenanceType').value,
                scheduledDate: document.getElementById('maintenanceDate').value,
                cost: document.getElementById('maintenanceCost').value ? parseFloat(document.getElementById('maintenanceCost').value) : 0,
                currency: document.getElementById('maintenanceCurrency').value,
                description: document.getElementById('maintenanceDescription').value,
                status: 'scheduled',
                dateAdded: new Date().toISOString()
            };
            
            data.maintenance.push(maintenanceRecord);
            saveData('maintenance', data.maintenance);
            
            // Update vehicle status if needed
            const vehicle = data.vehicles.find(v => v.id === maintenanceRecord.vehicleId);
            if (vehicle) {
                vehicle.status = 'maintenance';
                saveData('vehicles', data.vehicles);
            }
            
            alert('Maintenance scheduled successfully!');
            document.getElementById('scheduleMaintenanceForm').reset();
            loadMaintenanceTable();
            initializeDashboard();
        }
        
        // Record payment
        function recordPayment() {
            const data = getData();
            
            const payment = {
                id: generateId(),
                customerId: document.getElementById('paymentCustomer').value,
                rentalId: document.getElementById('paymentRental').value,
                amount: parseFloat(document.getElementById('paymentAmount').value),
                currency: document.getElementById('paymentCurrency').value,
                date: document.getElementById('paymentDate').value,
                method: document.getElementById('paymentMethod').value,
                type: document.getElementById('paymentType').value,
                notes: document.getElementById('paymentNotes').value,
                dateRecorded: new Date().toISOString()
            };
            
            data.payments.push(payment);
            saveData('payments', data.payments);
            
            alert('Payment recorded successfully!');
            document.getElementById('recordPaymentForm').reset();
            loadPaymentTable();
            initializeDashboard();
        }
        
        // Add fine
        function addFine() {
            const data = getData();
            
            const fine = {
                id: generateId(),
                customerId: document.getElementById('fineCustomer').value,
                type: document.getElementById('fineType').value,
                amount: parseFloat(document.getElementById('fineAmount').value),
                currency: document.getElementById('fineCurrency').value,
                date: document.getElementById('fineDate').value,
                description: document.getElementById('fineDescription').value,
                status: 'unpaid',
                dateAdded: new Date().toISOString()
            };
            
            data.fines.push(fine);
            saveData('fines', data.fines);
            
            alert('Fine/tax added successfully!');
            document.getElementById('addFineForm').reset();
            loadFinesTable();
        }
        
        // Generate report
        function generateReport() {
            const data = getData();
            const reportType = document.getElementById('reportType').value;
            const reportPeriod = document.getElementById('reportPeriod').value;
            const format = document.querySelector('input[name="reportFormat"]:checked').value;
            
            let startDate, endDate;
            
            // Calculate date range based on period
            const today = new Date();
            switch (reportPeriod) {
                case 'today':
                    startDate = new Date(today);
                    endDate = new Date(today);
                    break;
                case 'yesterday':
                    startDate = new Date(today);
                    startDate.setDate(today.getDate() - 1);
                    endDate = new Date(startDate);
                    break;
                case 'this_week':
                    startDate = new Date(today);
                    startDate.setDate(today.getDate() - today.getDay());
                    endDate = new Date(today);
                    break;
                case 'last_week':
                    startDate = new Date(today);
                    startDate.setDate(today.getDate() - today.getDay() - 7);
                    endDate = new Date(startDate);
                    endDate.setDate(startDate.getDate() + 6);
                    break;
                case 'this_month':
                    startDate = new Date(today.getFullYear(), today.getMonth(), 1);
                    endDate = new Date(today);
                    break;
                case 'last_month':
                    startDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);
                    endDate = new Date(today.getFullYear(), today.getMonth(), 0);
                    break;
                case 'custom':
                    startDate = new Date(document.getElementById('startDate').value);
                    endDate = new Date(document.getElementById('endDate').value);
                    break;
            }
            
            // Filter data based on report type and date range
            let reportData = [];
            let title = '';
            
            switch (reportType) {
                case 'rental':
                    reportData = data.rentals.filter(r => {
                        const rentalDate = new Date(r.date);
                        return rentalDate >= startDate && rentalDate <= endDate;
                    });
                    title = 'Rental Report';
                    break;
                case 'payment':
                    reportData = data.payments.filter(p => {
                        const paymentDate = new Date(p.date);
                        return paymentDate >= startDate && paymentDate <= endDate;
                    });
                    title = 'Payment Report';
                    break;
                case 'vehicle':
                    reportData = data.vehicles;
                    title = 'Vehicle Report';
                    break;
                case 'customer':
                    reportData = data.customers;
                    title = 'Customer Report';
                    break;
                case 'maintenance':
                    reportData = data.maintenance.filter(m => {
                        const maintenanceDate = new Date(m.scheduledDate);
                        return maintenanceDate >= startDate && maintenanceDate <= endDate;
                    });
                    title = 'Maintenance Report';
                    break;
                case 'fines':
                    reportData = data.fines.filter(f => {
                        const fineDate = new Date(f.date);
                        return fineDate >= startDate && fineDate <= endDate;
                    });
                    title = 'Fines Report';
                    break;
            }
            
            // Display or export report based on format
            if (format === 'pdf') {
                exportToPDF(reportData, title, startDate, endDate, data);
            } else if (format === 'excel') {
                exportToExcel(reportData, title, startDate, endDate, data);
            } else if (format === 'print') {
                printReport(reportData, title, startDate, endDate, data);
            }
        }
        
        // Export to PDF
        function exportToPDF(data, title, startDate, endDate, appData) {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            // Add title
            doc.setFontSize(16);
            doc.text(title, 105, 15, { align: 'center' });
            
            // Add date range
            doc.setFontSize(10);
            doc.text(`Period: ${startDate.toLocaleDateString()} to ${endDate.toLocaleDateString()}`, 105, 22, { align: 'center' });
            
            // Add company info if available
            if (appData.settings.companyAddress) {
                doc.text(appData.settings.companyAddress, 105, 29, { align: 'center' });
            }
            
            // Generate table based on report type
            let headers = [];
            let rows = [];
            
            if (title.includes('Rental')) {
                headers = ['Invoice Code', 'Customer', 'Vehicle', 'Date', 'Amount', 'Status'];
                rows = data.map(rental => {
                    const customer = appData.customers.find(c => c.id === rental.customerId);
                    const vehicle = appData.vehicles.find(v => v.id === rental.vehicleId);
                    const amount = rental.currency === 'IQD' ? 
                        `IQD ${rental.amount.toLocaleString()}` : 
                        `$${rental.amount.toFixed(2)}`;
                    
                    return [
                        rental.invoiceCode,
                        customer ? customer.fullName : 'N/A',
                        vehicle ? vehicle.name : 'N/A',
                        new Date(rental.date).toLocaleDateString(),
                        amount,
                        rental.status
                    ];
                });
            } else if (title.includes('Payment')) {
                headers = ['Customer', 'Type', 'Amount', 'Date', 'Method'];
                rows = data.map(payment => {
                    const customer = appData.customers.find(c => c.id === payment.customerId);
                    const amount = payment.currency === 'IQD' ? 
                        `IQD ${payment.amount.toLocaleString()}` : 
                        `$${payment.amount.toFixed(2)}`;
                    
                    return [
                        customer ? customer.fullName : 'N/A',
                        payment.type,
                        amount,
                        new Date(payment.date).toLocaleDateString(),
                        payment.method
                    ];
                });
            } else if (title.includes('Vehicle')) {
                headers = ['Name', 'Model', 'Color', 'Plate', 'Odometer', 'Status'];
                rows = data.map(vehicle => [
                    vehicle.name,
                    vehicle.model,
                    vehicle.color,
                    vehicle.plate,
                    vehicle.odometer.toLocaleString(),
                    vehicle.status
                ]);
            } else if (title.includes('Customer')) {
                headers = ['Full Name', 'Age', 'ID', 'Nationality', 'Contact'];
                rows = data.map(customer => [
                    customer.fullName,
                    customer.age,
                    customer.idNumber,
                    customer.nationality,
                    customer.contact
                ]);
            } else if (title.includes('Maintenance')) {
                headers = ['Vehicle', 'Type', 'Scheduled Date', 'Cost', 'Status'];
                rows = data.map(maint => {
                    const vehicle = appData.vehicles.find(v => v.id === maint.vehicleId);
                    const cost = maint.currency === 'IQD' ? 
                        `IQD ${maint.cost.toLocaleString()}` : 
                        `$${maint.cost.toFixed(2)}`;
                    
                    return [
                        vehicle ? vehicle.name : 'N/A',
                        maint.type,
                        new Date(maint.scheduledDate).toLocaleDateString(),
                        cost,
                        maint.status
                    ];
                });
            } else if (title.includes('Fines')) {
                headers = ['Customer', 'Type', 'Amount', 'Date', 'Status'];
                rows = data.map(fine => {
                    const customer = appData.customers.find(c => c.id === fine.customerId);
                    const amount = fine.currency === 'IQD' ? 
                        `IQD ${fine.amount.toLocaleString()}` : 
                        `$${fine.amount.toFixed(2)}`;
                    
                    return [
                        customer ? customer.fullName : 'N/A',
                        fine.type,
                        amount,
                        new Date(fine.date).toLocaleDateString(),
                        fine.status
                    ];
                });
            }
            
            // Add table to PDF
            doc.autoTable({
                head: [headers],
                body: rows,
                startY: 35,
                styles: { fontSize: 8 },
                headStyles: { fillColor: [52, 152, 219] }
            });
            
            // Save PDF
            doc.save(`${title.replace(' ', '_')}_${new Date().toISOString().split('T')[0]}.pdf`);
            
            // Show success message
            document.getElementById('reportResults').innerHTML = `
                <div class="alert alert-success">
                    PDF report generated successfully! The download should start automatically.
                </div>
            `;
        }
        
        // Export to Excel
        function exportToExcel(data, title, startDate, endDate, appData) {
            // Create workbook and worksheet
            const wb = XLSX.utils.book_new();
            
            // Generate data based on report type
            let excelData = [];
            
            if (title.includes('Rental')) {
                excelData = [
                    ['Invoice Code', 'Customer', 'Vehicle', 'Date', 'Amount', 'Currency', 'Status']
                ];
                
                data.forEach(rental => {
                    const customer = appData.customers.find(c => c.id === rental.customerId);
                    const vehicle = appData.vehicles.find(v => v.id === rental.vehicleId);
                    
                    excelData.push([
                        rental.invoiceCode,
                        customer ? customer.fullName : 'N/A',
                        vehicle ? vehicle.name : 'N/A',
                        new Date(rental.date).toLocaleDateString(),
                        rental.amount,
                        rental.currency,
                        rental.status
                    ]);
                });
            } else if (title.includes('Payment')) {
                excelData = [
                    ['Customer', 'Type', 'Amount', 'Currency', 'Date', 'Method', 'Notes']
                ];
                
                data.forEach(payment => {
                    const customer = appData.customers.find(c => c.id === payment.customerId);
                    
                    excelData.push([
                        customer ? customer.fullName : 'N/A',
                        payment.type,
                        payment.amount,
                        payment.currency,
                        new Date(payment.date).toLocaleDateString(),
                        payment.method,
                        payment.notes
                    ]);
                });
            } else if (title.includes('Vehicle')) {
                excelData = [
                    ['Name', 'Model', 'Color', 'Plate', 'VIN', 'Odometer', 'Rental Price', 'Currency', 'Status']
                ];
                
                data.forEach(vehicle => {
                    excelData.push([
                        vehicle.name,
                        vehicle.model,
                        vehicle.color,
                        vehicle.plate,
                        vehicle.vin,
                        vehicle.odometer,
                        vehicle.rentalPrice,
                        vehicle.rentalCurrency,
                        vehicle.status
                    ]);
                });
            } else if (title.includes('Customer')) {
                excelData = [
                    ['Full Name', 'Age', 'ID', 'Nationality', 'Contact', 'Address', 'Total Debt']
                ];
                
                data.forEach(customer => {
                    excelData.push([
                        customer.fullName,
                        customer.age,
                        customer.idNumber,
                        customer.nationality,
                        customer.contact,
                        customer.address,
                        customer.totalDebt
                    ]);
                });
            } else if (title.includes('Maintenance')) {
                excelData = [
                    ['Vehicle', 'Type', 'Scheduled Date', 'Cost', 'Currency', 'Description', 'Status']
                ];
                
                data.forEach(maint => {
                    const vehicle = appData.vehicles.find(v => v.id === maint.vehicleId);
                    
                    excelData.push([
                        vehicle ? vehicle.name : 'N/A',
                        maint.type,
                        new Date(maint.scheduledDate).toLocaleDateString(),
                        maint.cost,
                        maint.currency,
                        maint.description,
                        maint.status
                    ]);
                });
            } else if (title.includes('Fines')) {
                excelData = [
                    ['Customer', 'Type', 'Amount', 'Currency', 'Date', 'Description', 'Status']
                ];
                
                data.forEach(fine => {
                    const customer = appData.customers.find(c => c.id === fine.customerId);
                    
                    excelData.push([
                        customer ? customer.fullName : 'N/A',
                        fine.type,
                        fine.amount,
                        fine.currency,
                        new Date(fine.date).toLocaleDateString(),
                        fine.description,
                        fine.status
                    ]);
                });
            }
            
            const ws = XLSX.utils.aoa_to_sheet(excelData);
            XLSX.utils.book_append_sheet(wb, ws, title);
            
            // Save Excel file
            XLSX.writeFile(wb, `${title.replace(' ', '_')}_${new Date().toISOString().split('T')[0]}.xlsx`);
            
            // Show success message
            document.getElementById('reportResults').innerHTML = `
                <div class="alert alert-success">
                    Excel report generated successfully! The download should start automatically.
                </div>
            `;
        }
        
        // Print report
        function printReport(data, title, startDate, endDate, appData) {
            let printContent = `
                <div class="print-only">
                    <h2>${title}</h2>
                    <p><strong>Period:</strong> ${startDate.toLocaleDateString()} to ${endDate.toLocaleDateString()}</p>
                    <table class="table table-bordered">
            `;
            
            if (title.includes('Rental')) {
                printContent += `
                    <thead>
                        <tr>
                            <th>Invoice Code</th>
                            <th>Customer</th>
                            <th>Vehicle</th>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                `;
                
                data.forEach(rental => {
                    const customer = appData.customers.find(c => c.id === rental.customerId);
                    const vehicle = appData.vehicles.find(v => v.id === rental.vehicleId);
                    const amount = rental.currency === 'IQD' ? 
                        `IQD ${rental.amount.toLocaleString()}` : 
                        `$${rental.amount.toFixed(2)}`;
                    
                    printContent += `
                        <tr>
                            <td>${rental.invoiceCode}</td>
                            <td>${customer ? customer.fullName : 'N/A'}</td>
                            <td>${vehicle ? vehicle.name : 'N/A'}</td>
                            <td>${new Date(rental.date).toLocaleDateString()}</td>
                            <td>${amount}</td>
                            <td>${rental.status}</td>
                        </tr>
                    `;
                });
            } else if (title.includes('Payment')) {
                printContent += `
                    <thead>
                        <tr>
                            <th>Customer</th>
                            <th>Type</th>
                            <th>Amount</th>
                            <th>Date</th>
                            <th>Method</th>
                        </tr>
                    </thead>
                    <tbody>
                `;
                
                data.forEach(payment => {
                    const customer = appData.customers.find(c => c.id === payment.customerId);
                    const amount = payment.currency === 'IQD' ? 
                        `IQD ${payment.amount.toLocaleString()}` : 
                        `$${payment.amount.toFixed(2)}`;
                    
                    printContent += `
                        <tr>
                            <td>${customer ? customer.fullName : 'N/A'}</td>
                            <td>${payment.type}</td>
                            <td>${amount}</td>
                            <td>${new Date(payment.date).toLocaleDateString()}</td>
                            <td>${payment.method}</td>
                        </tr>
                    `;
                });
            }
            
            printContent += `
                    </tbody>
                </table>
                </div>
            `;
            
            const printWindow = window.open('', '_blank');
            printWindow.document.write(`
                <html>
                    <head>
                        <title>${title}</title>
                        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
                        <style>
                            body { padding: 20px; }
                            .print-only { display: block; }
                        </style>
                    </head>
                    <body>
                        ${printContent}
                    </body>
                </html>
            `);
            printWindow.document.close();
            printWindow.print();
            
            // Show success message
            document.getElementById('reportResults').innerHTML = `
                <div class="alert alert-success">
                    Report prepared for printing. The print dialog should open automatically.
                </div>
            `;
        }
        
        // Save system settings
        function saveSettings() {
            const data = getData();
            
            data.settings.systemName = document.getElementById('systemName').value;
            data.settings.defaultCurrency = document.getElementById('systemCurrency').value;
            data.settings.exchangeRate = parseFloat(document.getElementById('systemExchangeRate').value);
            data.settings.companyAddress = document.getElementById('systemAddress').value;
            
            // Handle logo upload
            const logoFile = document.getElementById('systemLogo').files[0];
            if (logoFile) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    data.settings.logo = e.target.result;
                    saveData('settings', data.settings);
                    initializeSettings();
                    alert('Settings saved successfully!');
                };
                reader.readAsDataURL(logoFile);
            } else {
                saveData('settings', data.settings);
                initializeSettings();
                alert('Settings saved successfully!');
            }
        }
        
        // Change password
        function changePassword() {
            const data = getData();
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (currentUser.password !== currentPassword) {
                alert('Current password is incorrect!');
                return;
            }
            
            if (newPassword !== confirmPassword) {
                alert('New passwords do not match!');
                return;
            }
            
            currentUser.password = newPassword;
            const userIndex = data.users.findIndex(u => u.username === currentUser.username);
            if (userIndex !== -1) {
                data.users[userIndex].password = newPassword;
            }
            
            saveData('users', data.users);
            saveData('loggedInUser', JSON.stringify(currentUser));
            
            alert('Password changed successfully!');
            document.getElementById('changePasswordForm').reset();
            bootstrap.Modal.getInstance(document.getElementById('changePasswordModal')).hide();
        }
        
        // Add user
        function addUser() {
            const data = getData();
            const username = document.getElementById('newUsername').value;
            const password = document.getElementById('newUserPassword').value;
            const role = document.getElementById('newUserRole').value;
            
            if (data.users.find(u => u.username === username)) {
                alert('Username already exists!');
                return;
            }
            
            data.users.push({
                username: username,
                password: password,
                role: role,
                lastLogin: null
            });
            
            saveData('users', data.users);
            
            alert('User added successfully!');
            document.getElementById('addUserForm').reset();
            bootstrap.Modal.getInstance(document.getElementById('addUserModal')).hide();
            loadUserTable();
        }
        
        // Load user table
        function loadUserTable() {
            const data = getData();
            const userTableBody = document.getElementById('userTableBody');
            userTableBody.innerHTML = data.users.map(user => `
                <tr>
                    <td>${user.username}</td>
                    <td>${user.role}</td>
                    <td>${user.lastLogin ? new Date(user.lastLogin).toLocaleString() : 'Never'}</td>
                    <td>
                        <button class="btn btn-sm btn-warning" onclick="editUser('${user.username}')">
                            <i class="fas fa-edit"></i>
                        </button>
                        ${user.username !== 'admin' ? `
                            <button class="btn btn-sm btn-danger" onclick="deleteUser('${user.username}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        ` : ''}
                    </td>
                </tr>
            `).join('');
        }
        
        // Edit user (placeholder)
        function editUser(username) {
            alert('Edit user functionality would be implemented here');
        }
        
        // Delete user
        function deleteUser(username) {
            if (confirm(`Are you sure you want to delete user "${username}"?`)) {
                const data = getData();
                data.users = data.users.filter(u => u.username !== username);
                saveData('users', data.users);
                loadUserTable();
            }
        }
        
        // Load vehicle table
        function loadVehicleTable() {
            const data = getData();
            const vehicleTableBody = document.getElementById('vehicleTableBody');
            vehicleTableBody.innerHTML = data.vehicles.map(vehicle => `
                <tr>
                    <td>${vehicle.name}</td>
                    <td>${vehicle.model}</td>
                    <td>${vehicle.color}</td>
                    <td>${vehicle.plate}</td>
                    <td>${vehicle.odometer.toLocaleString()}</td>
                    <td>${vehicle.rentalCurrency === 'IQD' ? 
                        `IQD ${vehicle.rentalPrice.toLocaleString()}` : 
                        `$${vehicle.rentalPrice.toFixed(2)}`}</td>
                    <td><span class="badge ${getStatusBadgeClass(vehicle.status)}">${vehicle.status}</span></td>
                    <td>
                        <button class="btn btn-sm btn-info" onclick="viewVehicleDetails('${vehicle.id}')">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-warning" onclick="editVehicle('${vehicle.id}')">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteVehicle('${vehicle.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');
        }
        
        // View vehicle details
        function viewVehicleDetails(vehicleId) {
            const data = getData();
            const vehicle = data.vehicles.find(v => v.id === vehicleId);
            if (!vehicle) return;
            
            const vehicleRentals = data.rentals.filter(r => r.vehicleId === vehicleId);
            const vehicleMaintenance = data.maintenance.filter(m => m.vehicleId === vehicleId);
            
            document.getElementById('vehicleDetailsContent').innerHTML = `
                <h4>${vehicle.name}</h4>
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Model:</strong> ${vehicle.model}</p>
                        <p><strong>Color:</strong> ${vehicle.color}</p>
                        <p><strong>Plate:</strong> ${vehicle.plate}</p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>VIN:</strong> ${vehicle.vin}</p>
                        <p><strong>Odometer:</strong> ${vehicle.odometer.toLocaleString()}</p>
                        <p><strong>Status:</strong> <span class="badge ${getStatusBadgeClass(vehicle.status)}">${vehicle.status}</span></p>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-6">
                        <h5>Rental History</h5>
                        ${vehicleRentals.length > 0 ? `
                            <ul>
                                ${vehicleRentals.map(rental => {
                                    const customer = data.customers.find(c => c.id === rental.customerId);
                                    return `<li>${customer ? customer.fullName : 'N/A'} - ${new Date(rental.date).toLocaleDateString()}</li>`;
                                }).join('')}
                            </ul>
                        ` : '<p>No rental history</p>'}
                    </div>
                    <div class="col-md-6">
                        <h5>Maintenance History</h5>
                        ${vehicleMaintenance.length > 0 ? `
                            <ul>
                                ${vehicleMaintenance.map(maint => `
                                    <li>${maint.type} - ${new Date(maint.scheduledDate).toLocaleDateString()} - ${maint.status}</li>
                                `).join('')}
                            </ul>
                        ` : '<p>No maintenance history</p>'}
                    </div>
                </div>
            `;
            
            document.getElementById('vehicleDetailsCard').style.display = 'block';
        }
        
        // Edit vehicle (placeholder)
        function editVehicle(vehicleId) {
            alert('Edit vehicle functionality would be implemented here');
        }
        
        // Delete vehicle
        function deleteVehicle(vehicleId) {
            if (confirm('Are you sure you want to delete this vehicle?')) {
                const data = getData();
                data.vehicles = data.vehicles.filter(v => v.id !== vehicleId);
                saveData('vehicles', data.vehicles);
                loadVehicleTable();
                initializeDashboard();
            }
        }
        
        // Load customer table
        function loadCustomerTable() {
            const data = getData();
            const customerTableBody = document.getElementById('customerTableBody');
            customerTableBody.innerHTML = data.customers.map(customer => `
                <tr>
                    <td>${customer.fullName}</td>
                    <td>${customer.age}</td>
                    <td>${customer.idNumber}</td>
                    <td>${customer.nationality}</td>
                    <td>${customer.contact}</td>
                    <td>$${customer.totalDebt.toFixed(2)}</td>
                    <td>
                        <button class="btn btn-sm btn-info" onclick="viewCustomerDetails('${customer.id}')">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-warning" onclick="editCustomer('${customer.id}')">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteCustomer('${customer.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');
        }
        
        // View customer details
        function viewCustomerDetails(customerId) {
            const data = getData();
            const customer = data.customers.find(c => c.id === customerId);
            if (!customer) return;
            
            const customerRentals = data.rentals.filter(r => r.customerId === customerId);
            const customerPayments = data.payments.filter(p => p.customerId === customerId);
            const customerFines = data.fines.filter(f => f.customerId === customerId);
            
            document.getElementById('customerDetailsContent').innerHTML = `
                <h4>${customer.fullName}</h4>
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Age:</strong> ${customer.age}</p>
                        <p><strong>ID:</strong> ${customer.idNumber}</p>
                        <p><strong>Nationality:</strong> ${customer.nationality}</p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>Contact:</strong> ${customer.contact}</p>
                        <p><strong>Address:</strong> ${customer.address}</p>
                        <p><strong>Total Debt:</strong> $${customer.totalDebt.toFixed(2)}</p>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-4">
                        <h5>Rental History</h5>
                        ${customerRentals.length > 0 ? `
                            <ul>
                                ${customerRentals.map(rental => {
                                    const vehicle = data.vehicles.find(v => v.id === rental.vehicleId);
                                    return `<li>${vehicle ? vehicle.name : 'N/A'} - ${new Date(rental.date).toLocaleDateString()}</li>`;
                                }).join('')}
                            </ul>
                        ` : '<p>No rental history</p>'}
                    </div>
                    <div class="col-md-4">
                        <h5>Payment History</h5>
                        ${customerPayments.length > 0 ? `
                            <ul>
                                ${customerPayments.map(payment => `
                                    <li>$${payment.amount.toFixed(2)} - ${new Date(payment.date).toLocaleDateString()}</li>
                                `).join('')}
                            </ul>
                        ` : '<p>No payment history</p>'}
                    </div>
                    <div class="col-md-4">
                        <h5>Fines & Taxes</h5>
                        ${customerFines.length > 0 ? `
                            <ul>
                                ${customerFines.map(fine => `
                                    <li>${fine.type} - $${fine.amount.toFixed(2)} - ${fine.status}</li>
                                `).join('')}
                            </ul>
                        ` : '<p>No fines or taxes</p>'}
                    </div>
                </div>
            `;
            
            document.getElementById('customerDetailsCard').style.display = 'block';
        }
        
        // Edit customer (placeholder)
        function editCustomer(customerId) {
            alert('Edit customer functionality would be implemented here');
        }
        
        // Delete customer
        function deleteCustomer(customerId) {
            if (confirm('Are you sure you want to delete this customer?')) {
                const data = getData();
                data.customers = data.customers.filter(c => c.id !== customerId);
                saveData('customers', data.customers);
                loadCustomerTable();
            }
        }
        
        // Load rental table
        function loadRentalTable() {
            const data = getData();
            const rentalTableBody = document.getElementById('rentalTableBody');
            rentalTableBody.innerHTML = data.rentals.map(rental => {
                const customer = data.customers.find(c => c.id === rental.customerId);
                const vehicle = data.vehicles.find(v => v.id === rental.vehicleId);
                const amount = rental.currency === 'IQD' ? 
                    `IQD ${rental.amount.toLocaleString()}` : 
                    `$${rental.amount.toFixed(2)}`;
                
                return `
                    <tr>
                        <td>${rental.invoiceCode}</td>
                        <td>${customer ? customer.fullName : 'N/A'}</td>
                        <td>${vehicle ? vehicle.name : 'N/A'}</td>
                        <td>${new Date(rental.date).toLocaleDateString()}</td>
                        <td>${amount}</td>
                        <td><span class="badge ${rental.status === 'active' ? 'bg-success' : 'bg-secondary'}">${rental.status}</span></td>
                        <td>
                            <button class="btn btn-sm btn-warning" onclick="editRental('${rental.id}')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-info" onclick="printInvoice('${rental.id}')">
                                <i class="fas fa-print"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="deleteRental('${rental.id}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');
        }
        
        // Print invoice
        function printInvoice(rentalId) {
            const data = getData();
            const rental = data.rentals.find(r => r.id === rentalId);
            if (!rental) return;
            
            const customer = data.customers.find(c => c.id === rental.customerId);
            const vehicle = data.vehicles.find(v => v.id === rental.vehicleId);
            
            // Populate invoice data
            document.getElementById('printInvoiceCode').textContent = rental.invoiceCode;
            document.getElementById('printInvoiceDate').textContent = new Date(rental.date).toLocaleDateString();
            document.getElementById('printCustomerName').textContent = customer ? customer.fullName : 'N/A';
            document.getElementById('printVehicleName').textContent = vehicle ? vehicle.name : 'N/A';
            document.getElementById('printCustomerId').textContent = customer ? customer.idNumber : 'N/A';
            document.getElementById('printCustomerAddress').textContent = customer ? customer.address : 'N/A';
            
            const amount = rental.currency === 'IQD' ? 
                `IQD ${rental.amount.toLocaleString()}` : 
                `$${rental.amount.toFixed(2)}`;
            document.getElementById('printRentalAmount').textContent = amount;
            document.getElementById('printRentalDays').textContent = rental.days;
            
            const totalAmount = rental.currency === 'IQD' ? 
                `IQD ${(rental.amount * rental.days).toLocaleString()}` : 
                `$${(rental.amount * rental.days).toFixed(2)}`;
            document.getElementById('printTotalAmount').textContent = totalAmount;
            
            // Set system name for printing
            document.getElementById('printSystemName').textContent = data.settings.systemName;
            
            // Print the invoice
            const printContent = document.getElementById('invoicePrint').innerHTML;
            const originalContent = document.body.innerHTML;
            
            document.body.innerHTML = printContent;
            window.print();
            document.body.innerHTML = originalContent;
            
            // Reinitialize the application
            showMainApp();
            initializeDashboard();
        }
        
        // Delete rental
        function deleteRental(rentalId) {
            if (confirm('Are you sure you want to delete this rental?')) {
                const data = getData();
                data.rentals = data.rentals.filter(r => r.id !== rentalId);
                saveData('rentals', data.rentals);
                loadRentalTable();
                initializeDashboard();
                populateReturnRentalDropdown();
            }
        }
        
        // Load return table
        function loadReturnTable() {
            const data = getData();
            const returnHistoryTableBody = document.getElementById('returnHistoryTableBody');
            returnHistoryTableBody.innerHTML = data.returns.map(returnRecord => {
                const rental = data.rentals.find(r => r.id === returnRecord.rentalId);
                if (!rental) return '';
                
                const customer = data.customers.find(c => c.id === rental.customerId);
                const vehicle = data.vehicles.find(v => v.id === rental.vehicleId);
                
                return `
                    <tr>
                        <td>${customer ? customer.fullName : 'N/A'}</td>
                        <td>${vehicle ? vehicle.name : 'N/A'}</td>
                        <td>${new Date(rental.date).toLocaleDateString()}</td>
                        <td>${new Date(returnRecord.returnDate).toLocaleDateString()}</td>
                        <td>${returnRecord.odometer.toLocaleString()}</td>
                        <td>${returnRecord.condition}</td>
                        <td>
                            <button class="btn btn-sm btn-info" onclick="viewReturnDetails('${returnRecord.id}')">
                                <i class="fas fa-eye"></i>
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');
        }
        
        // View return details (placeholder)
        function viewReturnDetails(returnId) {
            alert('View return details functionality would be implemented here');
        }
        
        // Load maintenance table
        function loadMaintenanceTable() {
            const data = getData();
            const maintenanceHistoryTableBody = document.getElementById('maintenanceHistoryTableBody');
            maintenanceHistoryTableBody.innerHTML = data.maintenance.map(maint => {
                const vehicle = data.vehicles.find(v => v.id === maint.vehicleId);
                const cost = maint.currency === 'IQD' ? 
                    `IQD ${maint.cost.toLocaleString()}` : 
                    `$${maint.cost.toFixed(2)}`;
                
                return `
                    <tr class="${maint.status === 'scheduled' ? 'maintenance-status' : ''}">
                        <td>${vehicle ? vehicle.name : 'N/A'}</td>
                        <td>${maint.type}</td>
                        <td>${new Date(maint.scheduledDate).toLocaleDateString()}</td>
                        <td>${cost}</td>
                        <td><span class="badge ${getStatusBadgeClass(maint.status)}">${maint.status}</span></td>
                        <td>
                            <button class="btn btn-sm btn-warning" onclick="editMaintenance('${maint.id}')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="deleteMaintenance('${maint.id}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');
        }
        
        // Edit maintenance (placeholder)
        function editMaintenance(maintenanceId) {
            alert('Edit maintenance functionality would be implemented here');
        }
        
        // Delete maintenance
        function deleteMaintenance(maintenanceId) {
            if (confirm('Are you sure you want to delete this maintenance record?')) {
                const data = getData();
                data.maintenance = data.maintenance.filter(m => m.id !== maintenanceId);
                saveData('maintenance', data.maintenance);
                loadMaintenanceTable();
            }
        }
        
        // Load payment table
        function loadPaymentTable() {
            const data = getData();
            const paymentHistoryTableBody = document.getElementById('paymentHistoryTableBody');
            paymentHistoryTableBody.innerHTML = data.payments.map(payment => {
                const customer = data.customers.find(c => c.id === payment.customerId);
                const amount = payment.currency === 'IQD' ? 
                    `IQD ${payment.amount.toLocaleString()}` : 
                    `$${payment.amount.toFixed(2)}`;
                
                return `
                    <tr>
                        <td>${customer ? customer.fullName : 'N/A'}</td>
                        <td>${payment.type}</td>
                        <td>${amount}</td>
                        <td>${new Date(payment.date).toLocaleDateString()}</td>
                        <td>${payment.method}</td>
                        <td>${payment.notes}</td>
                        <td>
                            <button class="btn btn-sm btn-warning" onclick="editPayment('${payment.id}')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="deletePayment('${payment.id}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');
        }
        
        // Edit payment (placeholder)
        function editPayment(paymentId) {
            alert('Edit payment functionality would be implemented here');
        }
        
        // Delete payment
        function deletePayment(paymentId) {
            if (confirm('Are you sure you want to delete this payment record?')) {
                const data = getData();
                data.payments = data.payments.filter(p => p.id !== paymentId);
                saveData('payments', data.payments);
                loadPaymentTable();
                initializeDashboard();
            }
        }
        
        // Load fines table
        function loadFinesTable() {
            const data = getData();
            const finesHistoryTableBody = document.getElementById('finesHistoryTableBody');
            finesHistoryTableBody.innerHTML = data.fines.map(fine => {
                const customer = data.customers.find(c => c.id === fine.customerId);
                const amount = fine.currency === 'IQD' ? 
                    `IQD ${fine.amount.toLocaleString()}` : 
                    `$${fine.amount.toFixed(2)}`;
                
                return `
                    <tr>
                        <td>${customer ? customer.fullName : 'N/A'}</td>
                        <td>${fine.type}</td>
                        <td>${amount}</td>
                        <td>${new Date(fine.date).toLocaleDateString()}</td>
                        <td>${fine.description}</td>
                        <td><span class="badge ${fine.status === 'paid' ? 'bg-success' : 'bg-danger'}">${fine.status}</span></td>
                        <td>
                            <button class="btn btn-sm btn-warning" onclick="editFine('${fine.id}')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="deleteFine('${fine.id}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');
        }
        
        // Edit fine (placeholder)
        function editFine(fineId) {
            alert('Edit fine functionality would be implemented here');
        }
        
        // Delete fine
        function deleteFine(fineId) {
            if (confirm('Are you sure you want to delete this fine/tax record?')) {
                const data = getData();
                data.fines = data.fines.filter(f => f.id !== fineId);
                saveData('fines', data.fines);
                loadFinesTable();
            }
        }
        
        // Search vehicles
        function searchVehicles() {
            const data = getData();
            const searchTerm = document.getElementById('vehicleSearch').value.toLowerCase();
            const filteredVehicles = data.vehicles.filter(vehicle => 
                vehicle.name.toLowerCase().includes(searchTerm) ||
                vehicle.model.toLowerCase().includes(searchTerm) ||
                vehicle.plate.toLowerCase().includes(searchTerm)
            );
            
            const vehicleTableBody = document.getElementById('vehicleTableBody');
            vehicleTableBody.innerHTML = filteredVehicles.map(vehicle => `
                <tr>
                    <td>${vehicle.name}</td>
                    <td>${vehicle.model}</td>
                    <td>${vehicle.color}</td>
                    <td>${vehicle.plate}</td>
                    <td>${vehicle.odometer.toLocaleString()}</td>
                    <td>${vehicle.rentalCurrency === 'IQD' ? 
                        `IQD ${vehicle.rentalPrice.toLocaleString()}` : 
                        `$${vehicle.rentalPrice.toFixed(2)}`}</td>
                    <td><span class="badge ${getStatusBadgeClass(vehicle.status)}">${vehicle.status}</span></td>
                    <td>
                        <button class="btn btn-sm btn-info" onclick="viewVehicleDetails('${vehicle.id}')">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-warning" onclick="editVehicle('${vehicle.id}')">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteVehicle('${vehicle.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');
        }
        
        // Search customers
        function searchCustomers() {
            const data = getData();
            const searchTerm = document.getElementById('customerSearch').value.toLowerCase();
            const filteredCustomers = data.customers.filter(customer => 
                customer.fullName.toLowerCase().includes(searchTerm) ||
                customer.idNumber.toLowerCase().includes(searchTerm) ||
                customer.contact.toLowerCase().includes(searchTerm)
            );
            
            const customerTableBody = document.getElementById('customerTableBody');
            customerTableBody.innerHTML = filteredCustomers.map(customer => `
                <tr>
                    <td>${customer.fullName}</td>
                    <td>${customer.age}</td>
                    <td>${customer.idNumber}</td>
                    <td>${customer.nationality}</td>
                    <td>${customer.contact}</td>
                    <td>$${customer.totalDebt.toFixed(2)}</td>
                    <td>
                        <button class="btn btn-sm btn-info" onclick="viewCustomerDetails('${customer.id}')">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-warning" onclick="editCustomer('${customer.id}')">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteCustomer('${customer.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `).join('');
        }
        
        // Search rentals
        function searchRentals() {
            const data = getData();
            const searchTerm = document.getElementById('rentalSearch').value.toLowerCase();
            const filteredRentals = data.rentals.filter(rental => 
                rental.invoiceCode.toLowerCase().includes(searchTerm)
            );
            
            const rentalTableBody = document.getElementById('rentalTableBody');
            rentalTableBody.innerHTML = filteredRentals.map(rental => {
                const customer = data.customers.find(c => c.id === rental.customerId);
                const vehicle = data.vehicles.find(v => v.id === rental.vehicleId);
                const amount = rental.currency === 'IQD' ? 
                    `IQD ${rental.amount.toLocaleString()}` : 
                    `$${rental.amount.toFixed(2)}`;
                
                return `
                    <tr>
                        <td>${rental.invoiceCode}</td>
                        <td>${customer ? customer.fullName : 'N/A'}</td>
                        <td>${vehicle ? vehicle.name : 'N/A'}</td>
                        <td>${new Date(rental.date).toLocaleDateString()}</td>
                        <td>${amount}</td>
                        <td><span class="badge ${rental.status === 'active' ? 'bg-success' : 'bg-secondary'}">${rental.status}</span></td>
                        <td>
                            <button class="btn btn-sm btn-warning" onclick="editRental('${rental.id}')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-info" onclick="printInvoice('${rental.id}')">
                                <i class="fas fa-print"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="deleteRental('${rental.id}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');
        }
        
        // Show customer suggestions
        function showCustomerSuggestions(query, containerId) {
            const data = getData();
            const container = document.getElementById(containerId);
            if (query.length < 2) {
                container.style.display = 'none';
                return;
            }
            
            const filteredCustomers = data.customers.filter(customer => 
                customer.fullName.toLowerCase().includes(query.toLowerCase())
            );
            
            if (filteredCustomers.length === 0) {
                container.style.display = 'none';
                return;
            }
            
            container.innerHTML = filteredCustomers.map(customer => `
                <div class="suggestion-item" onclick="selectCustomer('${customer.fullName}', '${containerId}')">
                    ${customer.fullName}
                </div>
            `).join('');
            
            container.style.display = 'block';
        }
        
        // Select customer from suggestions
        function selectCustomer(customerName, containerId) {
            const inputId = containerId === 'customerSuggestions' ? 'rentalCustomer' : 'editRentalCustomer';
            document.getElementById(inputId).value = customerName;
            document.getElementById(containerId).style.display = 'none';
        }
        
        // Show vehicle suggestions
        function showVehicleSuggestions(query, containerId) {
            const data = getData();
            const container = document.getElementById(containerId);
            if (query.length < 2) {
                container.style.display = 'none';
                return;
            }
            
            const filteredVehicles = data.vehicles.filter(vehicle => 
                vehicle.name.toLowerCase().includes(query.toLowerCase()) &&
                vehicle.status === 'available'
            );
            
            if (filteredVehicles.length === 0) {
                container.style.display = 'none';
                return;
            }
            
            container.innerHTML = filteredVehicles.map(vehicle => `
                <div class="suggestion-item" onclick="selectVehicle('${vehicle.name}', '${containerId}')">
                    ${vehicle.name} - ${vehicle.model} (${vehicle.plate})
                </div>
            `).join('');
            
            container.style.display = 'block';
        }
        
        // Select vehicle from suggestions
        function selectVehicle(vehicleName, containerId) {
            const inputId = containerId === 'vehicleSuggestions' ? 'rentalVehicle' : 'editRentalVehicle';
            document.getElementById(inputId).value = vehicleName;
            document.getElementById(containerId).style.display = 'none';
        }
        
        // Populate return rental dropdown
        function populateReturnRentalDropdown() {
            const data = getData();
            const dropdown = document.getElementById('returnRental');
            const activeRentals = data.rentals.filter(r => r.status === 'active');
            
            dropdown.innerHTML = '<option value="">Select a rental...</option>';
            activeRentals.forEach(rental => {
                const customer = data.customers.find(c => c.id === rental.customerId);
                const vehicle = data.vehicles.find(v => v.id === rental.vehicleId);
                dropdown.innerHTML += `<option value="${rental.id}">${customer ? customer.fullName : 'N/A'} - ${vehicle ? vehicle.name : 'N/A'} (${rental.invoiceCode})</option>`;
            });
        }
        
        // Populate payment customer dropdown
        function populatePaymentCustomerDropdown() {
            const data = getData();
            const dropdown = document.getElementById('paymentCustomer');
            dropdown.innerHTML = '<option value="">Select a customer...</option>';
            data.customers.forEach(customer => {
                dropdown.innerHTML += `<option value="${customer.id}">${customer.fullName}</option>`;
            });
        }
        
        // Populate fine customer dropdown
        function populateFineCustomerDropdown() {
            const data = getData();
            const dropdown = document.getElementById('fineCustomer');
            dropdown.innerHTML = '<option value="">Select a customer...</option>';
            data.customers.forEach(customer => {
                dropdown.innerHTML += `<option value="${customer.id}">${customer.fullName}</option>`;
            });
        }
        
        // Populate maintenance vehicle dropdown
        function populateMaintenanceVehicleDropdown() {
            const data = getData();
            const dropdown = document.getElementById('maintenanceVehicle');
            dropdown.innerHTML = '<option value="">Select a vehicle...</option>';
            data.vehicles.forEach(vehicle => {
                dropdown.innerHTML += `<option value="${vehicle.id}">${vehicle.name} (${vehicle.plate})</option>`;
            });
        }
        
        // Update database information
        function updateDatabaseInfo() {
            const data = getData();
            
            // Calculate database size (approximate)
            let totalSize = 0;
            for (const key in data) {
                totalSize += new Blob([JSON.stringify(data[key])]).size;
            }
            
            const sizeInMB = (totalSize / (1024 * 1024)).toFixed(2);
            const maxSizeInMB = 10 * 1024; // 10 GB in MB
            const usagePercent = (totalSize / (maxSizeInMB * 1024 * 1024)) * 100;
            
            document.getElementById('dbSize').textContent = `${sizeInMB} MB`;
            document.getElementById('maxDbSize').textContent = '10 GB';
            document.getElementById('dbUsageBar').style.width = `${usagePercent}%`;
            document.getElementById('dbUsageBar').textContent = `${usagePercent.toFixed(2)}%`;
            document.getElementById('dbUsageBar').setAttribute('aria-valuenow', usagePercent);
        }
        
        // Backup database
        function backupDatabase() {
            const data = getData();
            
            const backupData = {
                ...data,
                backupDate: new Date().toISOString()
            };
            
            const dataStr = JSON.stringify(backupData, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            
            const a = document.createElement('a');
            a.href = URL.createObjectURL(dataBlob);
            a.download = `car_rental_backup_${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            
            alert('Database backup created successfully!');
        }
        
        // Optimize database (placeholder)
        function optimizeDatabase() {
            alert('Database optimization would be implemented here');
        }
        
        // Clear old data (placeholder)
        function clearOldData() {
            if (confirm('Are you sure you want to clear old data? This action cannot be undone.')) {
                alert('Old data clearance would be implemented here');
            }
        }
        
        // Utility function to generate unique IDs
        function generateId() {
            return Date.now().toString(36) + Math.random().toString(36).substr(2);
        }
        
        // Utility function to get status badge class
        function getStatusBadgeClass(status) {
            switch (status) {
                case 'available':
                case 'completed':
                case 'paid':
                    return 'bg-success';
                case 'rented':
                case 'active':
                    return 'bg-primary';
                case 'maintenance':
                case 'scheduled':
                    return 'bg-warning';
                case 'unpaid':
                    return 'bg-danger';
                default:
                    return 'bg-secondary';
            }
        }
    </script>
</body>
</html>
