<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Car Rental System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #3498db;
            --secondary-color: #2c3e50;
            --success-color: #27ae60;
            --danger-color: #e74c3c;
            --warning-color: #f39c12;
            --info-color: #17a2b8;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
        }
        
        .navbar-brand {
            font-weight: bold;
        }
        
        .sidebar {
            background-color: var(--secondary-color);
            color: white;
            min-height: calc(100vh - 56px);
            padding: 0;
        }
        
        .sidebar .nav-link {
            color: rgba(255, 255, 255, 0.8);
            padding: 12px 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .sidebar .nav-link:hover, .sidebar .nav-link.active {
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
        }
        
        .sidebar .nav-link i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }
        
        .card {
            border: none;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            margin-bottom: 20px;
        }
        
        .card-header {
            background-color: white;
            border-bottom: 1px solid rgba(0, 0, 0, 0.125);
            font-weight: 600;
        }
        
        .dashboard-card {
            transition: transform 0.3s;
        }
        
        .dashboard-card:hover {
            transform: translateY(-5px);
        }
        
        .table-responsive {
            border-radius: 5px;
        }
        
        .tab-content {
            padding: 20px;
            background-color: white;
            border-radius: 0 0 5px 5px;
        }
        
        .nav-tabs .nav-link.active {
            border-bottom: 3px solid var(--primary-color);
            font-weight: 600;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.25rem rgba(52, 152, 219, 0.25);
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }
        
        .btn-success {
            background-color: var(--success-color);
            border-color: var(--success-color);
        }
        
        .btn-danger {
            background-color: var(--danger-color);
            border-color: var(--danger-color);
        }
        
        .btn-warning {
            background-color: var(--warning-color);
            border-color: var(--warning-color);
        }
        
        .logo-container {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 15px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .system-name {
            font-size: 1.2rem;
            font-weight: bold;
            margin-left: 10px;
        }
        
        .copyright {
            position: absolute;
            bottom: 10px;
            width: 100%;
            text-align: center;
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.6);
        }
        
        .print-only {
            display: none;
        }
        
        @media print {
            .no-print {
                display: none !important;
            }
            .print-only {
                display: block;
            }
            body {
                background-color: white;
            }
            .card {
                box-shadow: none;
                border: 1px solid #ddd;
            }
        }
        
        .vehicle-details, .customer-details {
            display: none;
            margin-top: 20px;
        }
        
        .suggestion-list {
            position: absolute;
            background: white;
            border: 1px solid #ddd;
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            width: 100%;
            display: none;
        }
        
        .suggestion-item {
            padding: 8px 12px;
            cursor: pointer;
        }
        
        .suggestion-item:hover {
            background-color: #f8f9fa;
        }
        
        .status-returned {
            background-color: #d4edda;
        }
        
        .status-not-returned {
            background-color: #f8d7da;
        }
        
        .login-container {
            max-width: 400px;
            margin: 100px auto;
            padding: 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }
        
        .invoice-logo {
            text-align: center;
            margin-bottom: 20px;
        }
        
        .invoice-logo img {
            max-width: 200px;
            height: auto;
        }
        
        .custom-logo {
            max-height: 50px;
            margin-right: 10px;
        }
        
        .currency-badge {
            font-size: 0.7rem;
            margin-left: 5px;
        }
        
        .user-only {
            display: none;
        }
        
        .system-logo-large {
            max-width: 200px;
            max-height: 80px;
            margin-bottom: 15px;
        }
        
        .signature-area {
            margin-top: 50px;
            border-top: 1px solid #000;
            padding-top: 10px;
        }
    </style>
</head>
<body>
    <!-- Login Screen -->
    <div id="loginScreen" class="login-container">
        <div class="text-center mb-4">
            <i class="fas fa-car fa-3x text-primary mb-3"></i>
            <h2>Car Rental System</h2>
            <p class="text-muted">Please login to continue</p>
        </div>
        <form id="loginForm">
            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <input type="text" class="form-control" id="username" required>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="password" required>
            </div>
            <button type="submit" class="btn btn-primary w-100">Login</button>
        </form>
        <div class="text-center mt-3">
            <small class="text-muted">Default admin password: 000000</small>
        </div>
        <div class="text-center mt-4">
            <small class="text-muted">Created by Farzad Programmer - Not Editable</small>
        </div>
    </div>

    <!-- Main Application -->
    <div id="mainApp" style="display: none;">
        <!-- Navigation Bar -->
        <nav class="navbar navbar-expand-lg navbar-dark bg-dark no-print">
            <div class="container-fluid">
                <a class="navbar-brand" href="#">
                    <img id="headerLogo" src="" class="custom-logo" style="display: none;">
                    <span id="headerSystemName">Car Rental System</span>
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown">
                                <i class="fas fa-user-circle"></i> <span id="currentUser">Admin</span>
                            </a>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#changePasswordModal"><i class="fas fa-key"></i> Change Password</a></li>
                                <li class="admin-only"><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#userManagementModal"><i class="fas fa-users"></i> User Management</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="#" id="logoutBtn"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>

        <div class="container-fluid">
            <div class="row">
                <!-- Sidebar -->
                <div class="col-md-2 sidebar d-none d-md-block no-print">
                    <div class="logo-container">
                        <img id="sidebarLogo" src="" class="system-logo-large" style="display: none;">
                        <span class="system-name" id="sidebarSystemName">RentalSys</span>
                    </div>
                    <ul class="nav flex-column">
                        <li class="nav-item dashboard-item">
                            <a class="nav-link active" href="#dashboard" data-bs-toggle="tab">
                                <i class="fas fa-tachometer-alt"></i> Dashboard
                            </a>
                        </li>
                        <li class="nav-item vehicles-item">
                            <a class="nav-link" href="#vehicles" data-bs-toggle="tab">
                                <i class="fas fa-car"></i> Vehicles
                            </a>
                        </li>
                        <li class="nav-item customers-item">
                            <a class="nav-link" href="#customers" data-bs-toggle="tab">
                                <i class="fas fa-users"></i> Customers
                            </a>
                        </li>
                        <li class="nav-item rentals-item">
                            <a class="nav-link" href="#rentals" data-bs-toggle="tab">
                                <i class="fas fa-receipt"></i> Rentals
                            </a>
                        </li>
                        <li class="nav-item returns-item">
                            <a class="nav-link" href="#returns" data-bs-toggle="tab">
                                <i class="fas fa-undo"></i> Vehicle Returns
                            </a>
                        </li>
                        <li class="nav-item maintenance-item">
                            <a class="nav-link" href="#maintenance" data-bs-toggle="tab">
                                <i class="fas fa-tools"></i> Vehicle Maintenance
                            </a>
                        </li>
                        <li class="nav-item debts-item">
                            <a class="nav-link" href="#debts" data-bs-toggle="tab">
                                <i class="fas fa-money-bill-wave"></i> Debts & Payments
                            </a>
                        </li>
                        <li class="nav-item fines-item">
                            <a class="nav-link" href="#fines" data-bs-toggle="tab">
                                <i class="fas fa-gavel"></i> Fines & Taxes
                            </a>
                        </li>
                        <li class="nav-item reports-item">
                            <a class="nav-link" href="#reports" data-bs-toggle="tab">
                                <i class="fas fa-chart-bar"></i> Reports
                            </a>
                        </li>
                        <li class="nav-item admin-only settings-item">
                            <a class="nav-link" href="#settings" data-bs-toggle="tab">
                                <i class="fas fa-cogs"></i> System Settings
                            </a>
                        </li>
                    </ul>
                    <div class="copyright">
                        Created by Farzad Programmer<br>Not Editable
                    </div>
                </div>

                <!-- Main Content -->
                <div class="col-md-10 ms-sm-auto col-lg-10 px-4">
                    <div class="tab-content mt-4">
                        <!-- Dashboard Tab -->
                        <div class="tab-pane fade show active" id="dashboard">
                            <h2 class="mb-4">Dashboard</h2>
                            <div class="row" id="dashboardStats">
                                <!-- Dashboard statistics will be loaded here -->
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-header">
                                            Recent Rentals
                                        </div>
                                        <div class="card-body">
                                            <div class="table-responsive">
                                                <table class="table table-hover">
                                                    <thead>
                                                        <tr>
                                                            <th>Customer</th>
                                                            <th>Vehicle</th>
                                                            <th>Date</th>
                                                            <th>Amount</th>
                                                            <th>Status</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="recentRentalsTable">
                                                        <!-- Recent rentals will be loaded here -->
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-header">
                                            Vehicle Status
                                        </div>
                                        <div class="card-body">
                                            <canvas id="vehicleStatusChart" width="400" height="200"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Vehicles Tab -->
                        <div class="tab-pane fade" id="vehicles">
                            <h2 class="mb-4">Vehicle Management</h2>
                            
                            <ul class="nav nav-tabs mb-3">
                                <li class="nav-item">
                                    <a class="nav-link active" data-bs-toggle="tab" href="#addVehicle">Add Vehicle</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" data-bs-toggle="tab" href="#vehicleList">Vehicle List</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" data-bs-toggle="tab" href="#vehicleHistory">Vehicle History</a>
                                </li>
                            </ul>
                            
                            <div class="tab-content">
                                <div class="tab-pane fade show active" id="addVehicle">
                                    <div class="card">
                                        <div class="card-header">
                                            Add New Vehicle
                                        </div>
                                        <div class="card-body">
                                            <form id="addVehicleForm">
                                                <div class="row">
                                                    <div class="col-md-6 mb-3">
                                                        <label for="vehicleName" class="form-label">Vehicle Name</label>
                                                        <input type="text" class="form-control" id="vehicleName" required>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="vehicleOdometer" class="form-label">Odometer</label>
                                                        <input type="number" class="form-control" id="vehicleOdometer" required>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6 mb-3">
                                                        <label for="vehicleVin" class="form-label">VIN #</label>
                                                        <input type="text" class="form-control" id="vehicleVin" required>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="vehiclePlate" class="form-label">Plate Number</label>
                                                        <input type="text" class="form-control" id="vehiclePlate" required>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6 mb-3">
                                                        <label for="vehicleColor" class="form-label">Color</label>
                                                        <input type="text" class="form-control" id="vehicleColor" required>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="vehicleModel" class="form-label">Model</label>
                                                        <input type="text" class="form-control" id="vehicleModel" required>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6 mb-3">
                                                        <label for="vehicleRentalPrice" class="form-label">Rental Price (per day)</label>
                                                        <div class="input-group">
                                                            <input type="number" class="form-control" id="vehicleRentalPrice" required>
                                                            <select class="form-select" id="vehicleRentalCurrency" style="max-width: 120px;">
                                                                <option value="USD">USD</option>
                                                                <option value="IQD">IQD</option>
                                                            </select>
                                                        </div>
                                                    </div>
                                                </div>
                                                <button type="submit" class="btn btn-primary">Add Vehicle</button>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="tab-pane fade" id="vehicleList">
                                    <div class="card">
                                        <div class="card-header d-flex justify-content-between align-items-center">
                                            <span>Vehicle List</span>
                                            <div class="input-group" style="width: 300px;">
                                                <input type="text" class="form-control" id="vehicleSearch" placeholder="Search vehicles...">
                                                <button class="btn btn-outline-secondary" type="button" id="vehicleSearchBtn">
                                                    <i class="fas fa-search"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div class="table-responsive">
                                                <table class="table table-hover">
                                                    <thead>
                                                        <tr>
                                                            <th>Name</th>
                                                            <th>Model</th>
                                                            <th>Color</th>
                                                            <th>Plate #</th>
                                                            <th>Odometer</th>
                                                            <th>Rental Price</th>
                                                            <th>Status</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="vehicleTableBody">
                                                        <!-- Vehicle data will be populated here -->
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Vehicle Details Section -->
                                    <div class="card vehicle-details" id="vehicleDetailsCard">
                                        <div class="card-header d-flex justify-content-between align-items-center">
                                            <span>Vehicle Details</span>
                                            <button class="btn btn-sm btn-secondary" id="closeVehicleDetails">Close</button>
                                        </div>
                                        <div class="card-body" id="vehicleDetailsContent">
                                            <!-- Vehicle details will be populated here -->
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="tab-pane fade" id="vehicleHistory">
                                    <div class="card">
                                        <div class="card-header">
                                            Vehicle Rental History
                                        </div>
                                        <div class="card-body">
                                            <div class="table-responsive">
                                                <table class="table table-hover">
                                                    <thead>
                                                        <tr>
                                                            <th>Vehicle</th>
                                                            <th>Customer</th>
                                                            <th>Rental Date</th>
                                                            <th>Return Date</th>
                                                            <th>Amount</th>
                                                            <th>Status</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="vehicleHistoryTableBody">
                                                        <!-- Vehicle history will be populated here -->
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Customers Tab -->
                        <div class="tab-pane fade" id="customers">
                            <h2 class="mb-4">Customer Management</h2>
                            
                            <ul class="nav nav-tabs mb-3">
                                <li class="nav-item">
                                    <a class="nav-link active" data-bs-toggle="tab" href="#addCustomer">Add Customer</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" data-bs-toggle="tab" href="#customerList">Customer List</a>
                                </li>
                            </ul>
                            
                            <div class="tab-content">
                                <div class="tab-pane fade show active" id="addCustomer">
                                    <div class="card">
                                        <div class="card-header">
                                            Add New Customer
                                        </div>
                                        <div class="card-body">
                                            <form id="addCustomerForm">
                                                <div class="row">
                                                    <div class="col-md-6 mb-3">
                                                        <label for="customerFullName" class="form-label">Full Name</label>
                                                        <input type="text" class="form-control" id="customerFullName" required>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="customerAge" class="form-label">Age</label>
                                                        <input type="number" class="form-control" id="customerAge" required>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6 mb-3">
                                                        <label for="customerId" class="form-label">PS/ID</label>
                                                        <input type="text" class="form-control" id="customerId" required>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="customerNationality" class="form-label">Nationality</label>
                                                        <input type="text" class="form-control" id="customerNationality" required>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6 mb-3">
                                                        <label for="customerContact" class="form-label">Contact Number</label>
                                                        <input type="text" class="form-control" id="customerContact" required>
                                                    </div>
                                                    <div class="col-md-6 mb-3">
                                                        <label for="customerAddress" class="form-label">Address</label>
                                                        <input type="text" class="form-control" id="customerAddress" required>
                                                    </div>
                                                </div>
                                                <div class="mb-3">
                                                    <label for="guaranteeDoc" class="form-label">Guarantee / Document</label>
                                                    <input type="file" class="form-control" id="guaranteeDoc">
                                                </div>
                                                <button type="submit" class="btn btn-primary">Add Customer</button>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="tab-pane fade" id="customerList">
                                    <div class="card">
                                        <div class="card-header d-flex justify-content-between align-items-center">
                                            <span>Customer List</span>
                                            <div class="input-group" style="width: 300px;">
                                                <input type="text" class="form-control" id="customerSearch" placeholder="Search customers...">
                                                <button class="btn btn-outline-secondary" type="button" id="customerSearchBtn">
                                                    <i class="fas fa-search"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div class="table-responsive">
                                                <table class="table table-hover">
                                                    <thead>
                                                        <tr>
                                                            <th>Full Name</th>
                                                            <th>Age</th>
                                                            <th>ID</th>
                                                            <th>Nationality</th>
                                                            <th>Contact</th>
                                                            <th>Total Debt</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="customerTableBody">
                                                        <!-- Customer data will be populated here -->
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Customer Details Section -->
                                    <div class="card customer-details" id="customerDetailsCard">
                                        <div class="card-header d-flex justify-content-between align-items-center">
                                            <span>Customer Details</span>
                                            <button class="btn btn-sm btn-secondary" id="closeCustomerDetails">Close</button>
                                        </div>
                                        <div class="card-body" id="customerDetailsContent">
                                            <!-- Customer details will be populated here -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Rentals Tab -->
                        <div class="tab-pane fade" id="rentals">
                            <h2 class="mb-4">Rental Management</h2>
                            
                            <div class="card">
                                <div class="card-header">
                                    Create New Rental
                                </div>
                                <div class="card-body">
                                    <form id="createRentalForm">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="rentalCustomer" class="form-label">Customer</label>
                                                <input type="text" class="form-control" id="rentalCustomer" placeholder="Search customer...">
                                                <div class="suggestion-list" id="customerSuggestions"></div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="rentalVehicle" class="form-label">Vehicle</label>
                                                <input type="text" class="form-control" id="rentalVehicle" placeholder="Search vehicle...">
                                                <div class="suggestion-list" id="vehicleSuggestions"></div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="rentalAmount" class="form-label">Rental Amount (per day)</label>
                                                <div class="input-group">
                                                    <input type="number" class="form-control" id="rentalAmount" required>
                                                    <select class="form-select" id="rentalCurrency" style="max-width: 120px;">
                                                        <option value="USD">USD</option>
                                                        <option value="IQD">IQD</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="rentalDays" class="form-label">Rental Days</label>
                                                <input type="number" class="form-control" id="rentalDays" required>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="invoiceCode" class="form-label">Invoice Code</label>
                                                <input type="text" class="form-control" id="invoiceCode">
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="exchangeRate" class="form-label">Exchange Rate (USD to IQD)</label>
                                                <input type="number" class="form-control" id="exchangeRate" value="1410" step="0.01">
                                            </div>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Create Rental</button>
                                    </form>
                                </div>
                            </div>
                            
                            <div class="card mt-4">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <span>Rental History</span>
                                    <div class="input-group" style="width: 300px;">
                                        <input type="text" class="form-control" id="rentalSearch" placeholder="Search by invoice code...">
                                        <button class="btn btn-outline-secondary" type="button" id="rentalSearchBtn">
                                            <i class="fas fa-search"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Invoice Code</th>
                                                    <th>Customer</th>
                                                    <th>Vehicle</th>
                                                    <th>Date</th>
                                                    <th>Amount</th>
                                                    <th>Status</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="rentalTableBody">
                                                <!-- Rental data will be populated here -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Invoice for Printing -->
                            <div id="invoicePrint" class="print-only" style="display: none;">
                                <div class="invoice-logo">
                                    <img id="printLogo" src="" style="max-width: 200px; display: none;">
                                    <h3 id="printSystemName">Car Rental System</h3>
                                </div>
                                <div class="card">
                                    <div class="card-header text-center">
                                        <h3>Car Rental Invoice</h3>
                                    </div>
                                    <div class="card-body">
                                        <div class="row mb-3">
                                            <div class="col-6">
                                                <strong>Invoice Code:</strong> <span id="printInvoiceCode"></span>
                                            </div>
                                            <div class="col-6 text-end">
                                                <strong>Date:</strong> <span id="printInvoiceDate"></span>
                                            </div>
                                        </div>
                                        <div class="row mb-3">
                                            <div class="col-6">
                                                <strong>Customer:</strong> <span id="printCustomerName"></span>
                                            </div>
                                            <div class="col-6">
                                                <strong>Vehicle:</strong> <span id="printVehicleName"></span>
                                            </div>
                                        </div>
                                        <div class="row mb-3">
                                            <div class="col-6">
                                                <strong>Customer ID:</strong> <span id="printCustomerId"></span>
                                            </div>
                                            <div class="col-6">
                                                <strong>Customer Address:</strong> <span id="printCustomerAddress"></span>
                                            </div>
                                        </div>
                                        <div class="row mb-3">
                                            <div class="col-12">
                                                <strong>Rental Amount (per day):</strong> <span id="printRentalAmount"></span>
                                            </div>
                                        </div>
                                        <div class="row mb-3">
                                            <div class="col-12">
                                                <strong>Rental Days:</strong> <span id="printRentalDays"></span>
                                            </div>
                                        </div>
                                        <div class="row mb-3">
                                            <div class="col-12">
                                                <strong>Rental History:</strong>
                                                <div id="printRentalHistory"></div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-12">
                                                <hr>
                                                <h4 class="text-end">Total: <span id="printTotalAmount"></span></h4>
                                            </div>
                                        </div>
                                        <div class="row signature-area">
                                            <div class="col-6">
                                                <strong>Customer Signature:</strong>
                                                <div style="height: 50px; border-bottom: 1px solid #000;"></div>
                                            </div>
                                            <div class="col-6 text-end">
                                                <strong>Company Signature:</strong>
                                                <div style="height: 50px; border-bottom: 1px solid #000;"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Vehicle Returns Tab -->
                        <div class="tab-pane fade" id="returns">
                            <h2 class="mb-4">Vehicle Returns</h2>
                            
                            <div class="card">
                                <div class="card-header">
                                    Return Vehicle
                                </div>
                                <div class="card-body">
                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <label for="returnStartDate" class="form-label">Start Date</label>
                                            <input type="date" class="form-control" id="returnStartDate">
                                        </div>
                                        <div class="col-md-6">
                                            <label for="returnEndDate" class="form-label">End Date</label>
                                            <input type="date" class="form-control" id="returnEndDate">
                                        </div>
                                    </div>
                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <label for="returnSearch" class="form-label">Search by Customer or Vehicle</label>
                                            <input type="text" class="form-control" id="returnSearch" placeholder="Search customer or vehicle...">
                                        </div>
                                        <div class="col-md-6 d-flex align-items-end">
                                            <button class="btn btn-primary me-2" id="filterReturnsBtn">Filter</button>
                                            <button class="btn btn-secondary" id="clearFilterBtn">Clear</button>
                                        </div>
                                    </div>
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Invoice Code</th>
                                                    <th>Customer</th>
                                                    <th>Vehicle</th>
                                                    <th>Rental Date</th>
                                                    <th>Amount</th>
                                                    <th>Status</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="pendingReturnsTable">
                                                <!-- Pending returns will be populated here -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card mt-4">
                                <div class="card-header">
                                    Return History
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Invoice Code</th>
                                                    <th>Customer</th>
                                                    <th>Vehicle</th>
                                                    <th>Return Date</th>
                                                    <th>Fine</th>
                                                    <th>Total</th>
                                                </tr>
                                            </thead>
                                            <tbody id="returnTableBody">
                                                <!-- Return data will be populated here -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Vehicle Maintenance Tab -->
                        <div class="tab-pane fade" id="maintenance">
                            <h2 class="mb-4">Vehicle Maintenance</h2>
                            
                            <div class="card">
                                <div class="card-header">
                                    Add Maintenance Record
                                </div>
                                <div class="card-body">
                                    <form id="addMaintenanceForm">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="maintenanceVehicle" class="form-label">Vehicle</label>
                                                <input type="text" class="form-control" id="maintenanceVehicle" placeholder="Search vehicle...">
                                                <div class="suggestion-list" id="maintenanceVehicleSuggestions"></div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="maintenanceType" class="form-label">Maintenance Type</label>
                                                <select class="form-select" id="maintenanceType" required>
                                                    <option value="">Select type...</option>
                                                    <option value="Oil Change">Oil Change</option>
                                                    <option value="Tire Replacement">Tire Replacement</option>
                                                    <option value="Brake Service">Brake Service</option>
                                                    <option value="Engine Repair">Engine Repair</option>
                                                    <option value="General Service">General Service</option>
                                                    <option value="Other">Other</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="maintenanceCost" class="form-label">Cost</label>
                                                <div class="input-group">
                                                    <input type="number" class="form-control" id="maintenanceCost" required>
                                                    <select class="form-select" id="maintenanceCurrency" style="max-width: 120px;">
                                                        <option value="USD">USD</option>
                                                        <option value="IQD">IQD</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="maintenanceDate" class="form-label">Date</label>
                                                <input type="date" class="form-control" id="maintenanceDate" required>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="maintenanceDescription" class="form-label">Description</label>
                                            <textarea class="form-control" id="maintenanceDescription" rows="3"></textarea>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Add Maintenance</button>
                                    </form>
                                </div>
                            </div>
                            
                            <div class="card mt-4">
                                <div class="card-header">
                                    Maintenance History
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Date</th>
                                                    <th>Vehicle</th>
                                                    <th>Type</th>
                                                    <th>Cost</th>
                                                    <th>Description</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="maintenanceTableBody">
                                                <!-- Maintenance data will be populated here -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Debts & Payments Tab -->
                        <div class="tab-pane fade" id="debts">
                            <h2 class="mb-4">Debts & Payments</h2>
                            
                            <div class="card">
                                <div class="card-header">
                                    Search Customer
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="debtCustomer" class="form-label">Customer</label>
                                            <input type="text" class="form-control" id="debtCustomer" placeholder="Search customer...">
                                            <div class="suggestion-list" id="debtCustomerSuggestions"></div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Current Debt</label>
                                            <div class="form-control" id="currentDebt">$0</div>
                                        </div>
                                    </div>
                                    <div class="row mt-3">
                                        <div class="col-12">
                                            <h6>Customer Summary</h6>
                                            <div id="customerDebtSummary">
                                                <!-- Customer debt summary will be populated here -->
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card mt-4">
                                <div class="card-header">
                                    Add Payment
                                </div>
                                <div class="card-body">
                                    <form id="addPaymentForm">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="paymentAmount" class="form-label">Payment Amount</label>
                                                <div class="input-group">
                                                    <input type="number" class="form-control" id="paymentAmount" required>
                                                    <select class="form-select" id="paymentCurrency" style="max-width: 120px;">
                                                        <option value="USD">USD</option>
                                                        <option value="IQD">IQD</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="paymentDate" class="form-label">Date</label>
                                                <input type="date" class="form-control" id="paymentDate" required>
                                            </div>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Add Payment</button>
                                    </form>
                                </div>
                            </div>
                            
                            <div class="card mt-4">
                                <div class="card-header">
                                    Payment History
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Date</th>
                                                    <th>Customer</th>
                                                    <th>Amount</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="paymentTableBody">
                                                <!-- Payment data will be populated here -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Payment Receipt for Printing -->
                            <div id="paymentReceiptPrint" class="print-only" style="display: none;">
                                <div class="invoice-logo">
                                    <img id="printPaymentLogo" src="" style="max-width: 200px; display: none;">
                                    <h3 id="printPaymentSystemName">Car Rental System</h3>
                                </div>
                                <div class="card">
                                    <div class="card-header text-center">
                                        <h3>Payment Receipt</h3>
                                    </div>
                                    <div class="card-body">
                                        <div class="row mb-3">
                                            <div class="col-6">
                                                <strong>Receipt No:</strong> <span id="printReceiptNo"></span>
                                            </div>
                                            <div class="col-6 text-end">
                                                <strong>Date:</strong> <span id="printPaymentDate"></span>
                                            </div>
                                        </div>
                                        <div class="row mb-3">
                                            <div class="col-12">
                                                <strong>Customer:</strong> <span id="printPaymentCustomer"></span>
                                            </div>
                                        </div>
                                        <div class="row mb-3">
                                            <div class="col-12">
                                                <strong>Payment Amount:</strong> <span id="printPaymentAmount"></span>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-12">
                                                <hr>
                                                <h4 class="text-end">Total Paid: <span id="printPaymentTotal"></span></h4>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Fines & Taxes Tab -->
                        <div class="tab-pane fade" id="fines">
                            <h2 class="mb-4">Fines & Taxes</h2>
                            
                            <div class="card">
                                <div class="card-header">
                                    Add Fine or Tax
                                </div>
                                <div class="card-body">
                                    <form id="addFineForm">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="fineCustomer" class="form-label">Customer</label>
                                                <input type="text" class="form-control" id="fineCustomer" placeholder="Search customer...">
                                                <div class="suggestion-list" id="fineCustomerSuggestions"></div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="fineType" class="form-label">Type</label>
                                                <select class="form-select" id="fineType" required>
                                                    <option value="">Select type...</option>
                                                    <option value="Traffic Fine">Traffic Fine</option>
                                                    <option value="Late Return">Late Return</option>
                                                    <option value="Damage">Damage</option>
                                                    <option value="Tax">Tax</option>
                                                    <option value="Other">Other</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="fineAmount" class="form-label">Amount</label>
                                                <div class="input-group">
                                                    <input type="number" class="form-control" id="fineAmount" required>
                                                    <select class="form-select" id="fineCurrency" style="max-width: 120px;">
                                                        <option value="USD">USD</option>
                                                        <option value="IQD">IQD</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="fineDate" class="form-label">Date</label>
                                                <input type="date" class="form-control" id="fineDate" required>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="fineDescription" class="form-label">Description</label>
                                            <textarea class="form-control" id="fineDescription" rows="3"></textarea>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Add Fine/Tax</button>
                                    </form>
                                </div>
                            </div>
                            
                            <div class="card mt-4">
                                <div class="card-header">
                                    Fines & Taxes History
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Date</th>
                                                    <th>Customer</th>
                                                    <th>Type</th>
                                                    <th>Amount</th>
                                                    <th>Description</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="fineTableBody">
                                                <!-- Fine data will be populated here -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Reports Tab -->
                        <div class="tab-pane fade" id="reports">
                            <h2 class="mb-4">Reports</h2>
                            
                            <div class="card">
                                <div class="card-header">
                                    Generate Report
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-4 mb-3">
                                            <label for="reportType" class="form-label">Report Type</label>
                                            <select class="form-select" id="reportType">
                                                <option value="rentals">Rentals Report</option>
                                                <option value="payments">Payments Report</option>
                                                <option value="fines">Fines Report</option>
                                                <option value="vehicles">Vehicles Report</option>
                                                <option value="maintenance">Maintenance Report</option>
                                            </select>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label for="reportStartDate" class="form-label">Start Date</label>
                                            <input type="date" class="form-control" id="reportStartDate">
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label for="reportEndDate" class="form-label">End Date</label>
                                            <input type="date" class="form-control" id="reportEndDate">
                                        </div>
                                    </div>
                                    <button class="btn btn-primary" id="generateReportBtn">Generate Report</button>
                                    <button class="btn btn-success ms-2" id="exportReportBtn">Export to Excel</button>
                                </div>
                            </div>
                            
                            <div class="card mt-4">
                                <div class="card-header">
                                    Report Results
                                </div>
                                <div class="card-body">
                                    <div id="reportResults">
                                        <!-- Report results will be displayed here -->
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Settings Tab -->
                        <div class="tab-pane fade" id="settings">
                            <h2 class="mb-4">System Settings</h2>
                            
                            <div class="card">
                                <div class="card-header">
                                    System Configuration
                                </div>
                                <div class="card-body">
                                    <form id="systemSettingsForm">
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="systemName" class="form-label">System Name</label>
                                                <input type="text" class="form-control" id="systemName" value="Car Rental System">
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="defaultCurrency" class="form-label">Default Currency</label>
                                                <select class="form-select" id="defaultCurrency">
                                                    <option value="USD">USD</option>
                                                    <option value="IQD">IQD</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label for="exchangeRate" class="form-label">Exchange Rate (USD to IQD)</label>
                                                <input type="number" class="form-control" id="settingsExchangeRate" value="1410" step="0.01">
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label for="systemLogo" class="form-label">System Logo</label>
                                                <input type="file" class="form-control" id="systemLogo" accept="image/*">
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-12 mb-3">
                                                <label for="systemMessage" class="form-label">System Message</label>
                                                <textarea class="form-control" id="systemMessage" rows="3" placeholder="Enter system message to display to users"></textarea>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <button type="button" class="btn btn-success w-100" id="backupBtn">
                                                    <i class="fas fa-download"></i> Backup Data
                                                </button>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <button type="button" class="btn btn-info w-100" id="restoreBtn">
                                                    <i class="fas fa-upload"></i> Restore Data
                                                </button>
                                            </div>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Save Settings</button>
                                    </form>
                                </div>
                            </div>
                            
                            <div class="card mt-4 admin-only">
                                <div class="card-header">
                                    User Management
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Username</th>
                                                    <th>Role</th>
                                                    <th>Permissions</th>
                                                    <th>Status</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="userTableBody">
                                                <!-- User data will be populated here -->
                                            </tbody>
                                        </table>
                                    </div>
                                    <button class="btn btn-primary mt-3" data-bs-toggle="modal" data-bs-target="#addUserModal">Add User</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modals -->
    <div class="modal fade" id="changePasswordModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Change Password</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="changePasswordForm">
                        <div class="mb-3">
                            <label for="currentPassword" class="form-label">Current Password</label>
                            <input type="password" class="form-control" id="currentPassword" required>
                        </div>
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">New Password</label>
                            <input type="password" class="form-control" id="newPassword" required>
                        </div>
                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <input type="password" class="form-control" id="confirmPassword" required>
                        </div>
                        <button type="submit" class="btn btn-primary">Change Password</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="userManagementModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">User Management</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Username</th>
                                    <th>Role</th>
                                    <th>Permissions</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="userManagementTableBody">
                                <!-- User management data will be populated here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="addUserModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addUserForm">
                        <div class="mb-3">
                            <label for="newUsername" class="form-label">Username</label>
                            <input type="text" class="form-control" id="newUsername" required>
                        </div>
                        <div class="mb-3">
                            <label for="newUserPassword" class="form-label">Password</label>
                            <input type="password" class="form-control" id="newUserPassword" required>
                        </div>
                        <div class="mb-3">
                            <label for="newUserRole" class="form-label">Role</label>
                            <select class="form-select" id="newUserRole">
                                <option value="user">User</option>
                                <option value="admin">Admin</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Permissions</label>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="dashboardPermission" checked>
                                <label class="form-check-label" for="dashboardPermission">Dashboard</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="vehiclesPermission" checked>
                                <label class="form-check-label" for="vehiclesPermission">Vehicles</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="customersPermission" checked>
                                <label class="form-check-label" for="customersPermission">Customers</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="rentalsPermission" checked>
                                <label class="form-check-label" for="rentalsPermission">Rentals</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="returnsPermission" checked>
                                <label class="form-check-label" for="returnsPermission">Vehicle Returns</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="maintenancePermission" checked>
                                <label class="form-check-label" for="maintenancePermission">Vehicle Maintenance</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="debtsPermission" checked>
                                <label class="form-check-label" for="debtsPermission">Debts & Payments</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="finesPermission" checked>
                                <label class="form-check-label" for="finesPermission">Fines & Taxes</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="reportsPermission" checked>
                                <label class="form-check-label" for="reportsPermission">Reports</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="editDeletePermission">
                                <label class="form-check-label" for="editDeletePermission">Edit & Delete Permissions</label>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">Add User</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Application data and state
        const appData = {
            users: [
                { 
                    username: 'admin', 
                    password: '000000', 
                    role: 'admin', 
                    permissions: ['dashboard', 'vehicles', 'customers', 'rentals', 'returns', 'maintenance', 'debts', 'fines', 'reports', 'settings', 'edit_delete'], 
                    active: true 
                },
                { 
                    username: 'user1', 
                    password: '123456', 
                    role: 'user', 
                    permissions: ['dashboard', 'vehicles', 'customers', 'rentals', 'returns'], 
                    active: true 
                }
            ],
            vehicles: [
                { 
                    id: 1, 
                    name: 'Toyota Camry', 
                    model: '2022', 
                    color: 'White', 
                    plate: 'ABC123', 
                    vin: '1HGCM82633A123456', 
                    odometer: 15000, 
                    status: 'available',
                    rentalPrice: 50,
                    rentalCurrency: 'USD'
                },
                { 
                    id: 2, 
                    name: 'Honda Civic', 
                    model: '2021', 
                    color: 'Black', 
                    plate: 'XYZ789', 
                    vin: '2HGCM82633A654321', 
                    odometer: 22000, 
                    status: 'rented',
                    rentalPrice: 45,
                    rentalCurrency: 'USD'
                },
                { 
                    id: 3, 
                    name: 'Ford Focus', 
                    model: '2020', 
                    color: 'Blue', 
                    plate: 'DEF456', 
                    vin: '3HGCM82633A987654', 
                    odometer: 18000, 
                    status: 'available',
                    rentalPrice: 70000,
                    rentalCurrency: 'IQD'
                }
            ],
            customers: [
                { id: 1, fullName: 'Ahmed Hassan', age: 35, idNumber: '123456789', nationality: 'Iraqi', contact: '07701234567', address: 'Baghdad, Karrada', guaranteeDoc: null },
                { id: 2, fullName: 'Sarah Mohammed', age: 28, idNumber: '987654321', nationality: 'Iraqi', contact: '07707654321', address: 'Erbil, Ainkawa', guaranteeDoc: null }
            ],
            rentals: [
                { id: 1, invoiceCode: 'INV001', customerId: 2, vehicleId: 2, date: '2023-05-15', amount: 50, currency: 'USD', days: 3, status: 'completed', returnDate: '2023-05-18' },
                { id: 2, invoiceCode: 'INV002', customerId: 1, vehicleId: 1, date: '2023-05-20', amount: 70, currency: 'USD', days: 5, status: 'active', returnDate: null }
            ],
            returns: [
                { id: 1, rentalId: 1, returnDate: '2023-05-18', fine: 0, total: 150 }
            ],
            payments: [
                { id: 1, customerId: 1, date: '2023-05-22', amount: 100, currency: 'USD' }
            ],
            fines: [
                { id: 1, customerId: 2, type: 'Traffic Fine', amount: 25, currency: 'USD', date: '2023-05-18', description: 'Speeding ticket' }
            ],
            maintenance: [
                { id: 1, vehicleId: 1, type: 'Oil Change', cost: 30, currency: 'USD', date: '2023-04-10', description: 'Regular oil change and filter replacement' },
                { id: 2, vehicleId: 2, type: 'Tire Replacement', cost: 200, currency: 'USD', date: '2023-03-15', description: 'Replaced all four tires' }
            ],
            settings: {
                systemName: 'Car Rental System',
                defaultCurrency: 'USD',
                exchangeRate: 1410,
                logo: null,
                systemMessage: ''
            },
            currentUser: null
        };

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            // Check if user is already logged in
            const savedUser = localStorage.getItem('currentUser');
            if (savedUser) {
                appData.currentUser = JSON.parse(savedUser);
                showMainApp();
            }

            // Login form submission
            document.getElementById('loginForm').addEventListener('submit', function(e) {
                e.preventDefault();
                const username = document.getElementById('username').value;
                const password = document.getElementById('password').value;
                
                const user = appData.users.find(u => u.username === username && u.password === password && u.active);
                
                if (user) {
                    appData.currentUser = user;
                    localStorage.setItem('currentUser', JSON.stringify(user));
                    showMainApp();
                } else {
                    alert('Invalid username or password');
                }
            });

            // Logout button
            document.getElementById('logoutBtn').addEventListener('click', function() {
                appData.currentUser = null;
                localStorage.removeItem('currentUser');
                document.getElementById('mainApp').style.display = 'none';
                document.getElementById('loginScreen').style.display = 'block';
            });

            // Initialize the main application
            initializeApp();
        });

        // Show main application after login
        function showMainApp() {
            document.getElementById('loginScreen').style.display = 'none';
            document.getElementById('mainApp').style.display = 'block';
            document.getElementById('currentUser').textContent = appData.currentUser.username;
            
            // Apply user permissions
            applyUserPermissions();
            
            // Load dashboard
            loadDashboard();
            
            // Load initial data
            loadVehicles();
            loadCustomers();
            loadRentals();
            loadReturns();
            loadPayments();
            loadFines();
            loadMaintenance();
            loadUsers();
            
            // Apply system settings
            applySystemSettings();
        }

        // Apply user permissions to UI
        function applyUserPermissions() {
            const user = appData.currentUser;
            const permissions = user.permissions;
            
            // Hide admin-only elements for non-admin users
            const adminElements = document.querySelectorAll('.admin-only');
            adminElements.forEach(el => {
                if (user.role !== 'admin') {
                    el.style.display = 'none';
                }
            });
            
            // Hide elements based on permissions
            const permissionMap = {
                'dashboard': '.dashboard-item',
                'vehicles': '.vehicles-item',
                'customers': '.customers-item',
                'rentals': '.rentals-item',
                'returns': '.returns-item',
                'maintenance': '.maintenance-item',
                'debts': '.debts-item',
                'fines': '.fines-item',
                'reports': '.reports-item',
                'settings': '.settings-item'
            };
            
            for (const [perm, selector] of Object.entries(permissionMap)) {
                const elements = document.querySelectorAll(selector);
                elements.forEach(el => {
                    if (!permissions.includes(perm)) {
                        el.style.display = 'none';
                    }
                });
            }
            
            // If dashboard permission is not available, redirect to first available tab
            if (!permissions.includes('dashboard') && permissions.length > 0) {
                const firstPermission = permissions[0];
                const firstTab = document.querySelector(`.${firstPermission}-item a`);
                if (firstTab) {
                    firstTab.click();
                }
            }
        }

        // Apply system settings to UI
        function applySystemSettings() {
            const settings = appData.settings;
            
            // Update system name
            document.getElementById('headerSystemName').textContent = settings.systemName;
            document.getElementById('sidebarSystemName').textContent = settings.systemName;
            document.getElementById('printSystemName').textContent = settings.systemName;
            document.getElementById('printPaymentSystemName').textContent = settings.systemName;
            
            // Update logo if available
            if (settings.logo) {
                document.getElementById('headerLogo').src = settings.logo;
                document.getElementById('headerLogo').style.display = 'inline';
                document.getElementById('sidebarLogo').src = settings.logo;
                document.getElementById('sidebarLogo').style.display = 'inline';
                document.getElementById('printLogo').src = settings.logo;
                document.getElementById('printLogo').style.display = 'inline';
                document.getElementById('printPaymentLogo').src = settings.logo;
                document.getElementById('printPaymentLogo').style.display = 'inline';
            }
            
            // Update exchange rate
            document.getElementById('exchangeRate').value = settings.exchangeRate;
            document.getElementById('settingsExchangeRate').value = settings.exchangeRate;
            
            // Update system message
            document.getElementById('systemMessage').value = settings.systemMessage;
        }

        // Initialize the application
        function initializeApp() {
            // Load saved data from localStorage if available
            const savedData = localStorage.getItem('carRentalData');
            if (savedData) {
                const parsedData = JSON.parse(savedData);
                Object.assign(appData, parsedData);
            }
            
            // Set up event listeners for forms
            setupEventListeners();
            
            // Initialize charts
            initializeCharts();
        }

        // Set up event listeners for forms
        function setupEventListeners() {
            // Add vehicle form
            document.getElementById('addVehicleForm').addEventListener('submit', function(e) {
                e.preventDefault();
                addVehicle();
            });
            
            // Add customer form
            document.getElementById('addCustomerForm').addEventListener('submit', function(e) {
                e.preventDefault();
                addCustomer();
            });
            
            // Create rental form
            document.getElementById('createRentalForm').addEventListener('submit', function(e) {
                e.preventDefault();
                createRental();
            });
            
            // Add payment form
            document.getElementById('addPaymentForm').addEventListener('submit', function(e) {
                e.preventDefault();
                addPayment();
            });
            
            // Add fine form
            document.getElementById('addFineForm').addEventListener('submit', function(e) {
                e.preventDefault();
                addFine();
            });
            
            // Add maintenance form
            document.getElementById('addMaintenanceForm').addEventListener('submit', function(e) {
                e.preventDefault();
                addMaintenance();
            });
            
            // System settings form
            document.getElementById('systemSettingsForm').addEventListener('submit', function(e) {
                e.preventDefault();
                saveSystemSettings();
            });
            
            // Add user form
            document.getElementById('addUserForm').addEventListener('submit', function(e) {
                e.preventDefault();
                addUser();
            });
            
            // Change password form
            document.getElementById('changePasswordForm').addEventListener('submit', function(e) {
                e.preventDefault();
                changePassword();
            });
            
            // Search functionality
            document.getElementById('vehicleSearchBtn').addEventListener('click', searchVehicles);
            document.getElementById('customerSearchBtn').addEventListener('click', searchCustomers);
            document.getElementById('rentalSearchBtn').addEventListener('click', searchRentals);
            document.getElementById('filterReturnsBtn').addEventListener('click', filterReturns);
            document.getElementById('clearFilterBtn').addEventListener('click', clearReturnFilters);
            
            // Report generation
            document.getElementById('generateReportBtn').addEventListener('click', generateReport);
            document.getElementById('exportReportBtn').addEventListener('click', exportReport);
            
            // Backup and restore
            document.getElementById('backupBtn').addEventListener('click', backupData);
            document.getElementById('restoreBtn').addEventListener('click', restoreData);
            
            // Close detail sections
            document.getElementById('closeVehicleDetails').addEventListener('click', function() {
                document.getElementById('vehicleDetailsCard').style.display = 'none';
            });
            
            document.getElementById('closeCustomerDetails').addEventListener('click', function() {
                document.getElementById('customerDetailsCard').style.display = 'none';
            });
            
            // Customer search for rentals
            document.getElementById('rentalCustomer').addEventListener('input', function() {
                searchCustomersForRental(this.value);
            });
            
            // Vehicle search for rentals
            document.getElementById('rentalVehicle').addEventListener('input', function() {
                searchVehiclesForRental(this.value);
            });
            
            // Customer search for debts
            document.getElementById('debtCustomer').addEventListener('input', function() {
                searchCustomersForDebt(this.value);
            });
            
            // Customer search for fines
            document.getElementById('fineCustomer').addEventListener('input', function() {
                searchCustomersForFine(this.value);
            });
            
            // Vehicle search for maintenance
            document.getElementById('maintenanceVehicle').addEventListener('input', function() {
                searchVehiclesForMaintenance(this.value);
            });
            
            // System logo upload
            document.getElementById('systemLogo').addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        appData.settings.logo = e.target.result;
                        applySystemSettings();
                    };
                    reader.readAsDataURL(file);
                }
            });
        }

        // Initialize charts
        function initializeCharts() {
            const ctx = document.getElementById('vehicleStatusChart').getContext('2d');
            const vehicleStatusChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Available', 'Rented', 'Maintenance'],
                    datasets: [{
                        data: [10, 5, 2],
                        backgroundColor: ['#28a745', '#007bff', '#ffc107']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        // Load dashboard data
        function loadDashboard() {
            const stats = document.getElementById('dashboardStats');
            const recentRentals = document.getElementById('recentRentalsTable');
            
            // Calculate statistics
            const totalVehicles = appData.vehicles.length;
            const availableVehicles = appData.vehicles.filter(v => v.status === 'available').length;
            const rentedVehicles = appData.vehicles.filter(v => v.status === 'rented').length;
            const maintenanceVehicles = appData.vehicles.filter(v => v.status === 'maintenance').length;
            const totalCustomers = appData.customers.length;
            const activeRentals = appData.rentals.filter(r => r.status === 'active').length;
            
            // Calculate total revenue from rentals
            const totalRentalRevenue = appData.rentals.reduce((sum, rental) => {
                return sum + (rental.amount * rental.days);
            }, 0);
            
            // Calculate total fines
            const totalFinesRevenue = appData.fines.reduce((sum, fine) => sum + fine.amount, 0);
            
            // Update dashboard stats
            stats.innerHTML = `
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card dashboard-card border-left-primary shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                        Total Rental Revenue</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">${formatCurrency(totalRentalRevenue, 'USD')}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card dashboard-card border-left-success shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                        Fines & Taxes Revenue</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">${formatCurrency(totalFinesRevenue, 'USD')}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-gavel fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card dashboard-card border-left-info shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                        Rented Vehicles</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">${rentedVehicles}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-car fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card dashboard-card border-left-warning shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                        Available Vehicles</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">${availableVehicles}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-car-side fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card dashboard-card border-left-primary shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                        Total Customers</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">${totalCustomers}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-users fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card dashboard-card border-left-success shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                        Total Vehicles</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">${totalVehicles}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-car fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card dashboard-card border-left-info shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                        Vehicles in Maintenance</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">${maintenanceVehicles}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-tools fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Update recent rentals table
            const recentRentalsData = appData.rentals.slice(-5).reverse();
            recentRentals.innerHTML = recentRentalsData.map(rental => {
                const customer = appData.customers.find(c => c.id === rental.customerId);
                const vehicle = appData.vehicles.find(v => v.id === rental.vehicleId);
                const statusClass = rental.status === 'active' ? 'status-not-returned' : 'status-returned';
                const statusText = rental.status === 'active' ? 'Active' : 'Completed';
                
                return `
                    <tr class="${statusClass}">
                        <td>${customer ? customer.fullName : 'Unknown'}</td>
                        <td>${vehicle ? vehicle.name : 'Unknown'}</td>
                        <td>${rental.date}</td>
                        <td>${formatCurrency(rental.amount, rental.currency)}</td>
                        <td>${statusText}</td>
                    </tr>
                `;
            }).join('');
        }

        // Load vehicles data
        function loadVehicles() {
            const tableBody = document.getElementById('vehicleTableBody');
            const historyTableBody = document.getElementById('vehicleHistoryTableBody');
            
            // Update vehicle list table
            tableBody.innerHTML = appData.vehicles.map(vehicle => {
                const statusClass = vehicle.status === 'available' ? 'status-returned' : 
                                 vehicle.status === 'rented' ? 'status-not-returned' : 'table-warning';
                const statusText = vehicle.status === 'available' ? 'Available' : 
                                 vehicle.status === 'rented' ? 'Rented' : 'Maintenance';
                
                const canEditDelete = appData.currentUser.permissions.includes('edit_delete') || appData.currentUser.role === 'admin';
                
                return `
                    <tr class="${statusClass}">
                        <td>${vehicle.name}</td>
                        <td>${vehicle.model}</td>
                        <td>${vehicle.color}</td>
                        <td>${vehicle.plate}</td>
                        <td>${vehicle.odometer.toLocaleString()} km</td>
                        <td>${formatCurrency(vehicle.rentalPrice, vehicle.rentalCurrency)}</td>
                        <td>${statusText}</td>
                        <td>
                            <button class="btn btn-sm btn-info" onclick="showVehicleDetails(${vehicle.id})">Details</button>
                            ${canEditDelete ? `
                                <button class="btn btn-sm btn-warning" onclick="editVehicle(${vehicle.id})">Edit</button>
                                <button class="btn btn-sm btn-danger" onclick="deleteVehicle(${vehicle.id})">Delete</button>
                            ` : ''}
                        </td>
                    </tr>
                `;
            }).join('');
            
            // Update vehicle history table
            const vehicleRentals = appData.rentals.filter(rental => 
                appData.vehicles.some(vehicle => vehicle.id === rental.vehicleId)
            );
            
            historyTableBody.innerHTML = vehicleRentals.map(rental => {
                const customer = appData.customers.find(c => c.id === rental.customerId);
                const vehicle = appData.vehicles.find(v => v.id === rental.vehicleId);
                const statusClass = rental.status === 'active' ? 'status-not-returned' : 'status-returned';
                const statusText = rental.status === 'active' ? 'Active' : 'Completed';
                
                return `
                    <tr class="${statusClass}">
                        <td>${vehicle ? vehicle.name : 'Unknown'}</td>
                        <td>${customer ? customer.fullName : 'Unknown'}</td>
                        <td>${rental.date}</td>
                        <td>${rental.returnDate || 'Not returned'}</td>
                        <td>${formatCurrency(rental.amount, rental.currency)}</td>
                        <td>${statusText}</td>
                    </tr>
                `;
            }).join('');
        }

        // Load customers data
        function loadCustomers() {
            const tableBody = document.getElementById('customerTableBody');
            
            tableBody.innerHTML = appData.customers.map(customer => {
                // Calculate total debt for customer
                const customerRentals = appData.rentals.filter(r => r.customerId === customer.id && r.status === 'active');
                const customerFines = appData.fines.filter(f => f.customerId === customer.id);
                const customerPayments = appData.payments.filter(p => p.customerId === customer.id);
                
                let totalDebt = 0;
                
                // Add rental amounts
                customerRentals.forEach(rental => {
                    totalDebt += rental.amount * rental.days;
                });
                
                // Add fines
                customerFines.forEach(fine => {
                    totalDebt += fine.amount;
                });
                
                // Subtract payments
                customerPayments.forEach(payment => {
                    totalDebt -= payment.amount;
                });
                
                const canEditDelete = appData.currentUser.permissions.includes('edit_delete') || appData.currentUser.role === 'admin';
                
                return `
                    <tr>
                        <td>${customer.fullName}</td>
                        <td>${customer.age}</td>
                        <td>${customer.idNumber}</td>
                        <td>${customer.nationality}</td>
                        <td>${customer.contact}</td>
                        <td>${formatCurrency(totalDebt, 'USD')}</td>
                        <td>
                            <button class="btn btn-sm btn-info" onclick="showCustomerDetails(${customer.id})">Details</button>
                            ${canEditDelete ? `
                                <button class="btn btn-sm btn-warning" onclick="editCustomer(${customer.id})">Edit</button>
                                <button class="btn btn-sm btn-danger" onclick="deleteCustomer(${customer.id})">Delete</button>
                            ` : ''}
                        </td>
                    </tr>
                `;
            }).join('');
        }

        // Load rentals data
        function loadRentals() {
            const tableBody = document.getElementById('rentalTableBody');
            
            tableBody.innerHTML = appData.rentals.map(rental => {
                const customer = appData.customers.find(c => c.id === rental.customerId);
                const vehicle = appData.vehicles.find(v => v.id === rental.vehicleId);
                const statusClass = rental.status === 'active' ? 'status-not-returned' : 'status-returned';
                const statusText = rental.status === 'active' ? 'Active' : 'Completed';
                
                const canEditDelete = appData.currentUser.permissions.includes('edit_delete') || appData.currentUser.role === 'admin';
                
                return `
                    <tr class="${statusClass}">
                        <td>${rental.invoiceCode}</td>
                        <td>${customer ? customer.fullName : 'Unknown'}</td>
                        <td>${vehicle ? vehicle.name : 'Unknown'}</td>
                        <td>${rental.date}</td>
                        <td>${formatCurrency(rental.amount, rental.currency)}</td>
                        <td>${statusText}</td>
                        <td>
                            <button class="btn btn-sm btn-info" onclick="printInvoice(${rental.id})">Print</button>
                            ${canEditDelete ? `
                                <button class="btn btn-sm btn-warning" onclick="editRental(${rental.id})">Edit</button>
                                <button class="btn btn-sm btn-danger" onclick="deleteRental(${rental.id})">Delete</button>
                            ` : ''}
                        </td>
                    </tr>
                `;
            }).join('');
        }

        // Load returns data
        function loadReturns() {
            const pendingReturnsTable = document.getElementById('pendingReturnsTable');
            const returnTableBody = document.getElementById('returnTableBody');
            
            // Filter active rentals (pending returns)
            const pendingReturns = appData.rentals.filter(rental => rental.status === 'active');
            
            pendingReturnsTable.innerHTML = pendingReturns.map(rental => {
                const customer = appData.customers.find(c => c.id === rental.customerId);
                const vehicle = appData.vehicles.find(v => v.id === rental.vehicleId);
                
                return `
                    <tr class="status-not-returned">
                        <td>${rental.invoiceCode}</td>
                        <td>${customer ? customer.fullName : 'Unknown'}</td>
                        <td>${vehicle ? vehicle.name : 'Unknown'}</td>
                        <td>${rental.date}</td>
                        <td>${formatCurrency(rental.amount, rental.currency)}</td>
                        <td>Active</td>
                        <td>
                            <button class="btn btn-sm btn-success" onclick="returnVehicle(${rental.id})">Return</button>
                        </td>
                    </tr>
                `;
            }).join('');
            
            // Load return history
            const returnsHistory = appData.returns.map(returnRecord => {
                const rental = appData.rentals.find(r => r.id === returnRecord.rentalId);
                const customer = rental ? appData.customers.find(c => c.id === rental.customerId) : null;
                const vehicle = rental ? appData.vehicles.find(v => v.id === rental.vehicleId) : null;
                
                return {
                    ...returnRecord,
                    customer: customer ? customer.fullName : 'Unknown',
                    vehicle: vehicle ? vehicle.name : 'Unknown',
                    invoiceCode: rental ? rental.invoiceCode : 'Unknown'
                };
            });
            
            returnTableBody.innerHTML = returnsHistory.map(returnRecord => `
                <tr class="status-returned">
                    <td>${returnRecord.invoiceCode}</td>
                    <td>${returnRecord.customer}</td>
                    <td>${returnRecord.vehicle}</td>
                    <td>${returnRecord.returnDate}</td>
                    <td>${formatCurrency(returnRecord.fine, 'USD')}</td>
                    <td>${formatCurrency(returnRecord.total, 'USD')}</td>
                </tr>
            `).join('');
        }

        // Load maintenance data
        function loadMaintenance() {
            const tableBody = document.getElementById('maintenanceTableBody');
            
            const maintenanceData = appData.maintenance.map(maintenance => {
                const vehicle = appData.vehicles.find(v => v.id === maintenance.vehicleId);
                return {
                    ...maintenance,
                    vehicleName: vehicle ? vehicle.name : 'Unknown'
                };
            });
            
            const canEditDelete = appData.currentUser.permissions.includes('edit_delete') || appData.currentUser.role === 'admin';
            
            tableBody.innerHTML = maintenanceData.map(maintenance => `
                <tr>
                    <td>${maintenance.date}</td>
                    <td>${maintenance.vehicleName}</td>
                    <td>${maintenance.type}</td>
                    <td>${formatCurrency(maintenance.cost, maintenance.currency)}</td>
                    <td>${maintenance.description}</td>
                    <td>
                        ${canEditDelete ? `
                            <button class="btn btn-sm btn-warning" onclick="editMaintenance(${maintenance.id})">Edit</button>
                            <button class="btn btn-sm btn-danger" onclick="deleteMaintenance(${maintenance.id})">Delete</button>
                        ` : ''}
                    </td>
                </tr>
            `).join('');
        }

        // Load payments data
        function loadPayments() {
            const tableBody = document.getElementById('paymentTableBody');
            
            const paymentData = appData.payments.map(payment => {
                const customer = appData.customers.find(c => c.id === payment.customerId);
                return {
                    ...payment,
                    customerName: customer ? customer.fullName : 'Unknown'
                };
            });
            
            const canEditDelete = appData.currentUser.permissions.includes('edit_delete') || appData.currentUser.role === 'admin';
            
            tableBody.innerHTML = paymentData.map(payment => `
                <tr>
                    <td>${payment.date}</td>
                    <td>${payment.customerName}</td>
                    <td>${formatCurrency(payment.amount, payment.currency)}</td>
                    <td>
                        <button class="btn btn-sm btn-info" onclick="printPaymentReceipt(${payment.id})">Print</button>
                        ${canEditDelete ? `
                            <button class="btn btn-sm btn-danger" onclick="deletePayment(${payment.id})">Delete</button>
                        ` : ''}
                    </td>
                </tr>
            `).join('');
        }

        // Load fines data
        function loadFines() {
            const tableBody = document.getElementById('fineTableBody');
            
            const fineData = appData.fines.map(fine => {
                const customer = appData.customers.find(c => c.id === fine.customerId);
                return {
                    ...fine,
                    customerName: customer ? customer.fullName : 'Unknown'
                };
            });
            
            const canEditDelete = appData.currentUser.permissions.includes('edit_delete') || appData.currentUser.role === 'admin';
            
            tableBody.innerHTML = fineData.map(fine => `
                <tr>
                    <td>${fine.date}</td>
                    <td>${fine.customerName}</td>
                    <td>${fine.type}</td>
                    <td>${formatCurrency(fine.amount, fine.currency)}</td>
                    <td>${fine.description}</td>
                    <td>
                        ${canEditDelete ? `
                            <button class="btn btn-sm btn-warning" onclick="editFine(${fine.id})">Edit</button>
                            <button class="btn btn-sm btn-danger" onclick="deleteFine(${fine.id})">Delete</button>
                        ` : ''}
                    </td>
                </tr>
            `).join('');
        }

        // Load users data
        function loadUsers() {
            const tableBody = document.getElementById('userTableBody');
            const managementTableBody = document.getElementById('userManagementTableBody');
            
            const userRows = appData.users.map(user => {
                const canEditDelete = appData.currentUser.role === 'admin' && appData.currentUser.username !== user.username;
                
                return `
                    <tr>
                        <td>${user.username}</td>
                        <td>${user.role}</td>
                        <td>${user.permissions.join(', ')}</td>
                        <td>${user.active ? 'Active' : 'Inactive'}</td>
                        <td>
                            ${canEditDelete ? `
                                <button class="btn btn-sm btn-warning" onclick="editUser('${user.username}')">Edit</button>
                                <button class="btn btn-sm btn-danger" onclick="toggleUserStatus('${user.username}')">
                                    ${user.active ? 'Deactivate' : 'Activate'}
                                </button>
                                <button class="btn btn-sm btn-info" onclick="deleteUser('${user.username}')">Delete</button>
                            ` : ''}
                        </td>
                    </tr>
                `;
            }).join('');
            
            if (tableBody) tableBody.innerHTML = userRows;
            if (managementTableBody) managementTableBody.innerHTML = userRows;
        }

        // Add a new vehicle
        function addVehicle() {
            const name = document.getElementById('vehicleName').value;
            const odometer = parseInt(document.getElementById('vehicleOdometer').value);
            const vin = document.getElementById('vehicleVin').value;
            const plate = document.getElementById('vehiclePlate').value;
            const color = document.getElementById('vehicleColor').value;
            const model = document.getElementById('vehicleModel').value;
            const rentalPrice = parseFloat(document.getElementById('vehicleRentalPrice').value);
            const rentalCurrency = document.getElementById('vehicleRentalCurrency').value;
            
            const newVehicle = {
                id: appData.vehicles.length > 0 ? Math.max(...appData.vehicles.map(v => v.id)) + 1 : 1,
                name,
                model,
                color,
                plate,
                vin,
                odometer,
                rentalPrice,
                rentalCurrency,
                status: 'available'
            };
            
            appData.vehicles.push(newVehicle);
            saveData();
            loadVehicles();
            document.getElementById('addVehicleForm').reset();
            alert('Vehicle added successfully!');
        }

        // Add a new customer
        function addCustomer() {
            const fullName = document.getElementById('customerFullName').value;
            const age = parseInt(document.getElementById('customerAge').value);
            const idNumber = document.getElementById('customerId').value;
            const nationality = document.getElementById('customerNationality').value;
            const contact = document.getElementById('customerContact').value;
            const address = document.getElementById('customerAddress').value;
            const guaranteeDoc = document.getElementById('guaranteeDoc').files[0];
            
            const newCustomer = {
                id: appData.customers.length > 0 ? Math.max(...appData.customers.map(c => c.id)) + 1 : 1,
                fullName,
                age,
                idNumber,
                nationality,
                contact,
                address,
                guaranteeDoc: guaranteeDoc ? guaranteeDoc.name : null
            };
            
            appData.customers.push(newCustomer);
            saveData();
            loadCustomers();
            document.getElementById('addCustomerForm').reset();
            alert('Customer added successfully!');
        }

        // Create a new rental
        function createRental() {
            const customerInput = document.getElementById('rentalCustomer').value;
            const vehicleInput = document.getElementById('rentalVehicle').value;
            const amount = parseFloat(document.getElementById('rentalAmount').value);
            const currency = document.getElementById('rentalCurrency').value;
            const days = parseInt(document.getElementById('rentalDays').value);
            const invoiceCode = document.getElementById('invoiceCode').value;
            
            // Find customer and vehicle by name
            const customer = appData.customers.find(c => c.fullName === customerInput);
            const vehicle = appData.vehicles.find(v => v.name === vehicleInput);
            
            if (!customer) {
                alert('Customer not found!');
                return;
            }
            
            if (!vehicle) {
                alert('Vehicle not found!');
                return;
            }
            
            if (vehicle.status !== 'available') {
                alert('Vehicle is not available for rental!');
                return;
            }
            
            const newRental = {
                id: appData.rentals.length > 0 ? Math.max(...appData.rentals.map(r => r.id)) + 1 : 1,
                invoiceCode: invoiceCode || `INV${Date.now()}`,
                customerId: customer.id,
                vehicleId: vehicle.id,
                date: new Date().toISOString().split('T')[0],
                amount,
                currency,
                days,
                status: 'active',
                returnDate: null
            };
            
            // Update vehicle status
            vehicle.status = 'rented';
            
            appData.rentals.push(newRental);
            saveData();
            loadRentals();
            loadVehicles();
            loadDashboard();
            document.getElementById('createRentalForm').reset();
            alert('Rental created successfully!');
        }

        // Add a payment
        function addPayment() {
            const customerInput = document.getElementById('debtCustomer').value;
            const amount = parseFloat(document.getElementById('paymentAmount').value);
            const currency = document.getElementById('paymentCurrency').value;
            const date = document.getElementById('paymentDate').value;
            
            // Find customer by name
            const customer = appData.customers.find(c => c.fullName === customerInput);
            
            if (!customer) {
                alert('Customer not found!');
                return;
            }
            
            const newPayment = {
                id: appData.payments.length > 0 ? Math.max(...appData.payments.map(p => p.id)) + 1 : 1,
                customerId: customer.id,
                date,
                amount,
                currency
            };
            
            appData.payments.push(newPayment);
            saveData();
            loadPayments();
            updateCustomerDebt(customer.id);
            document.getElementById('addPaymentForm').reset();
            alert('Payment added successfully!');
        }

        // Add a fine or tax
        function addFine() {
            const customerInput = document.getElementById('fineCustomer').value;
            const type = document.getElementById('fineType').value;
            const amount = parseFloat(document.getElementById('fineAmount').value);
            const currency = document.getElementById('fineCurrency').value;
            const date = document.getElementById('fineDate').value;
            const description = document.getElementById('fineDescription').value;
            
            // Find customer by name
            const customer = appData.customers.find(c => c.fullName === customerInput);
            
            if (!customer) {
                alert('Customer not found!');
                return;
            }
            
            const newFine = {
                id: appData.fines.length > 0 ? Math.max(...appData.fines.map(f => f.id)) + 1 : 1,
                customerId: customer.id,
                type,
                amount,
                currency,
                date,
                description
            };
            
            appData.fines.push(newFine);
            saveData();
            loadFines();
            updateCustomerDebt(customer.id);
            document.getElementById('addFineForm').reset();
            alert('Fine/Tax added successfully!');
        }

        // Add maintenance record
        function addMaintenance() {
            const vehicleInput = document.getElementById('maintenanceVehicle').value;
            const type = document.getElementById('maintenanceType').value;
            const cost = parseFloat(document.getElementById('maintenanceCost').value);
            const currency = document.getElementById('maintenanceCurrency').value;
            const date = document.getElementById('maintenanceDate').value;
            const description = document.getElementById('maintenanceDescription').value;
            
            // Find vehicle by name
            const vehicle = appData.vehicles.find(v => v.name === vehicleInput);
            
            if (!vehicle) {
                alert('Vehicle not found!');
                return;
            }
            
            const newMaintenance = {
                id: appData.maintenance.length > 0 ? Math.max(...appData.maintenance.map(m => m.id)) + 1 : 1,
                vehicleId: vehicle.id,
                type,
                cost,
                currency,
                date,
                description
            };
            
            appData.maintenance.push(newMaintenance);
            saveData();
            loadMaintenance();
            document.getElementById('addMaintenanceForm').reset();
            alert('Maintenance record added successfully!');
        }

        // Return a vehicle
        function returnVehicle(rentalId) {
            const rental = appData.rentals.find(r => r.id === rentalId);
            if (!rental) return;
            
            const vehicle = appData.vehicles.find(v => v.id === rental.vehicleId);
            if (!vehicle) return;
            
            // Calculate fine if any (for example, late return)
            const returnDate = new Date().toISOString().split('T')[0];
            const rentalDate = new Date(rental.date);
            const expectedReturn = new Date(rentalDate);
            expectedReturn.setDate(rentalDate.getDate() + rental.days);
            
            const actualReturn = new Date(returnDate);
            const daysLate = Math.max(0, Math.floor((actualReturn - expectedReturn) / (1000 * 60 * 60 * 24)));
            
            const fine = daysLate > 0 ? daysLate * 10 : 0; // $10 per day late
            
            // Update rental status
            rental.status = 'completed';
            rental.returnDate = returnDate;
            
            // Update vehicle status
            vehicle.status = 'available';
            
            // Add return record
            const total = (rental.amount * rental.days) + fine;
            
            const newReturn = {
                id: appData.returns.length > 0 ? Math.max(...appData.returns.map(r => r.id)) + 1 : 1,
                rentalId,
                returnDate,
                fine,
                total
            };
            
            appData.returns.push(newReturn);
            saveData();
            loadReturns();
            loadRentals();
            loadVehicles();
            loadDashboard();
            alert('Vehicle returned successfully!');
        }

        // Save system settings
        function saveSystemSettings() {
            const systemName = document.getElementById('systemName').value;
            const defaultCurrency = document.getElementById('defaultCurrency').value;
            const exchangeRate = parseFloat(document.getElementById('settingsExchangeRate').value);
            const systemMessage = document.getElementById('systemMessage').value;
            
            appData.settings.systemName = systemName;
            appData.settings.defaultCurrency = defaultCurrency;
            appData.settings.exchangeRate = exchangeRate;
            appData.settings.systemMessage = systemMessage;
            
            saveData();
            applySystemSettings();
            alert('Settings saved successfully!');
        }

        // Add a new user
        function addUser() {
            const username = document.getElementById('newUsername').value;
            const password = document.getElementById('newUserPassword').value;
            const role = document.getElementById('newUserRole').value;
            
            // Get permissions from checkboxes
            const permissions = [];
            if (document.getElementById('dashboardPermission').checked) permissions.push('dashboard');
            if (document.getElementById('vehiclesPermission').checked) permissions.push('vehicles');
            if (document.getElementById('customersPermission').checked) permissions.push('customers');
            if (document.getElementById('rentalsPermission').checked) permissions.push('rentals');
            if (document.getElementById('returnsPermission').checked) permissions.push('returns');
            if (document.getElementById('maintenancePermission').checked) permissions.push('maintenance');
            if (document.getElementById('debtsPermission').checked) permissions.push('debts');
            if (document.getElementById('finesPermission').checked) permissions.push('fines');
            if (document.getElementById('reportsPermission').checked) permissions.push('reports');
            if (document.getElementById('editDeletePermission').checked) permissions.push('edit_delete');
            
            const newUser = {
                username,
                password,
                role,
                permissions,
                active: true
            };
            
            appData.users.push(newUser);
            saveData();
            loadUsers();
            document.getElementById('addUserForm').reset();
            document.getElementById('addUserModal').querySelector('.btn-close').click();
            alert('User added successfully!');
        }

        // Change password
        function changePassword() {
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (newPassword !== confirmPassword) {
                alert('New passwords do not match!');
                return;
            }
            
            const user = appData.users.find(u => u.username === appData.currentUser.username);
            if (user.password !== currentPassword) {
                alert('Current password is incorrect!');
                return;
            }
            
            user.password = newPassword;
            saveData();
            document.getElementById('changePasswordForm').reset();
            document.getElementById('changePasswordModal').querySelector('.btn-close').click();
            alert('Password changed successfully!');
        }

        // Backup data
        function backupData() {
            const dataStr = JSON.stringify(appData, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            
            const url = URL.createObjectURL(dataBlob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `car-rental-backup-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            alert('Backup created successfully!');
        }

        // Restore data
        function restoreData() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.json';
            
            input.onchange = e => {
                const file = e.target.files[0];
                const reader = new FileReader();
                
                reader.onload = function(event) {
                    try {
                        const data = JSON.parse(event.target.result);
                        
                        if (data.vehicles && data.customers && data.rentals) {
                            Object.assign(appData, data);
                            
                            saveData();
                            loadVehicles();
                            loadCustomers();
                            loadRentals();
                            loadReturns();
                            loadPayments();
                            loadFines();
                            loadMaintenance();
                            loadUsers();
                            loadDashboard();
                            applySystemSettings();
                            
                            alert('Data restored successfully!');
                        } else {
                            alert('Invalid backup file format.');
                        }
                    } catch (error) {
                        alert('Error reading backup file: ' + error.message);
                    }
                };
                
                reader.readAsText(file);
            };
            
            input.click();
        }

        // Search functionality
        function searchVehicles() {
            const query = document.getElementById('vehicleSearch').value.toLowerCase();
            const filteredVehicles = appData.vehicles.filter(vehicle => 
                vehicle.name.toLowerCase().includes(query) ||
                vehicle.model.toLowerCase().includes(query) ||
                vehicle.plate.toLowerCase().includes(query)
            );
            
            const tableBody = document.getElementById('vehicleTableBody');
            tableBody.innerHTML = filteredVehicles.map(vehicle => {
                const statusClass = vehicle.status === 'available' ? 'status-returned' : 
                                 vehicle.status === 'rented' ? 'status-not-returned' : 'table-warning';
                const statusText = vehicle.status === 'available' ? 'Available' : 
                                 vehicle.status === 'rented' ? 'Rented' : 'Maintenance';
                
                const canEditDelete = appData.currentUser.permissions.includes('edit_delete') || appData.currentUser.role === 'admin';
                
                return `
                    <tr class="${statusClass}">
                        <td>${vehicle.name}</td>
                        <td>${vehicle.model}</td>
                        <td>${vehicle.color}</td>
                        <td>${vehicle.plate}</td>
                        <td>${vehicle.odometer.toLocaleString()} km</td>
                        <td>${formatCurrency(vehicle.rentalPrice, vehicle.rentalCurrency)}</td>
                        <td>${statusText}</td>
                        <td>
                            <button class="btn btn-sm btn-info" onclick="showVehicleDetails(${vehicle.id})">Details</button>
                            ${canEditDelete ? `
                                <button class="btn btn-sm btn-warning" onclick="editVehicle(${vehicle.id})">Edit</button>
                                <button class="btn btn-sm btn-danger" onclick="deleteVehicle(${vehicle.id})">Delete</button>
                            ` : ''}
                        </td>
                    </tr>
                `;
            }).join('');
        }

        function searchCustomers() {
            const query = document.getElementById('customerSearch').value.toLowerCase();
            const filteredCustomers = appData.customers.filter(customer => 
                customer.fullName.toLowerCase().includes(query) ||
                customer.idNumber.toLowerCase().includes(query) ||
                customer.contact.toLowerCase().includes(query)
            );
            
            const tableBody = document.getElementById('customerTableBody');
            tableBody.innerHTML = filteredCustomers.map(customer => {
                // Calculate total debt for customer
                const customerRentals = appData.rentals.filter(r => r.customerId === customer.id && r.status === 'active');
                const customerFines = appData.fines.filter(f => f.customerId === customer.id);
                const customerPayments = appData.payments.filter(p => p.customerId === customer.id);
                
                let totalDebt = 0;
                
                // Add rental amounts
                customerRentals.forEach(rental => {
                    totalDebt += rental.amount * rental.days;
                });
                
                // Add fines
                customerFines.forEach(fine => {
                    totalDebt += fine.amount;
                });
                
                // Subtract payments
                customerPayments.forEach(payment => {
                    totalDebt -= payment.amount;
                });
                
                const canEditDelete = appData.currentUser.permissions.includes('edit_delete') || appData.currentUser.role === 'admin';
                
                return `
                    <tr>
                        <td>${customer.fullName}</td>
                        <td>${customer.age}</td>
                        <td>${customer.idNumber}</td>
                        <td>${customer.nationality}</td>
                        <td>${customer.contact}</td>
                        <td>${formatCurrency(totalDebt, 'USD')}</td>
                        <td>
                            <button class="btn btn-sm btn-info" onclick="showCustomerDetails(${customer.id})">Details</button>
                            ${canEditDelete ? `
                                <button class="btn btn-sm btn-warning" onclick="editCustomer(${customer.id})">Edit</button>
                                <button class="btn btn-sm btn-danger" onclick="deleteCustomer(${customer.id})">Delete</button>
                            ` : ''}
                        </td>
                    </tr>
                `;
            }).join('');
        }

        function searchRentals() {
            const query = document.getElementById('rentalSearch').value.toLowerCase();
            const filteredRentals = appData.rentals.filter(rental => 
                rental.invoiceCode.toLowerCase().includes(query)
            );
            
            const tableBody = document.getElementById('rentalTableBody');
            tableBody.innerHTML = filteredRentals.map(rental => {
                const customer = appData.customers.find(c => c.id === rental.customerId);
                const vehicle = appData.vehicles.find(v => v.id === rental.vehicleId);
                const statusClass = rental.status === 'active' ? 'status-not-returned' : 'status-returned';
                const statusText = rental.status === 'active' ? 'Active' : 'Completed';
                
                const canEditDelete = appData.currentUser.permissions.includes('edit_delete') || appData.currentUser.role === 'admin';
                
                return `
                    <tr class="${statusClass}">
                        <td>${rental.invoiceCode}</td>
                        <td>${customer ? customer.fullName : 'Unknown'}</td>
                        <td>${vehicle ? vehicle.name : 'Unknown'}</td>
                        <td>${rental.date}</td>
                        <td>${formatCurrency(rental.amount, rental.currency)}</td>
                        <td>${statusText}</td>
                        <td>
                            <button class="btn btn-sm btn-info" onclick="printInvoice(${rental.id})">Print</button>
                            ${canEditDelete ? `
                                <button class="btn btn-sm btn-warning" onclick="editRental(${rental.id})">Edit</button>
                                <button class="btn btn-sm btn-danger" onclick="deleteRental(${rental.id})">Delete</button>
                            ` : ''}
                        </td>
                    </tr>
                `;
            }).join('');
        }

        function filterReturns() {
            const startDate = document.getElementById('returnStartDate').value;
            const endDate = document.getElementById('returnEndDate').value;
            const searchQuery = document.getElementById('returnSearch').value.toLowerCase();
            
            let filteredRentals = appData.rentals.filter(rental => rental.status === 'active');
            
            // Filter by date range
            if (startDate) {
                filteredRentals = filteredRentals.filter(rental => rental.date >= startDate);
            }
            
            if (endDate) {
                filteredRentals = filteredRentals.filter(rental => rental.date <= endDate);
            }
            
            // Filter by search query
            if (searchQuery) {
                filteredRentals = filteredRentals.filter(rental => {
                    const customer = appData.customers.find(c => c.id === rental.customerId);
                    const vehicle = appData.vehicles.find(v => v.id === rental.vehicleId);
                    
                    return (
                        (customer && customer.fullName.toLowerCase().includes(searchQuery)) ||
                        (vehicle && vehicle.name.toLowerCase().includes(searchQuery)) ||
                        rental.invoiceCode.toLowerCase().includes(searchQuery)
                    );
                });
            }
            
            const pendingReturnsTable = document.getElementById('pendingReturnsTable');
            pendingReturnsTable.innerHTML = filteredRentals.map(rental => {
                const customer = appData.customers.find(c => c.id === rental.customerId);
                const vehicle = appData.vehicles.find(v => v.id === rental.vehicleId);
                
                return `
                    <tr class="status-not-returned">
                        <td>${rental.invoiceCode}</td>
                        <td>${customer ? customer.fullName : 'Unknown'}</td>
                        <td>${vehicle ? vehicle.name : 'Unknown'}</td>
                        <td>${rental.date}</td>
                        <td>${formatCurrency(rental.amount, rental.currency)}</td>
                        <td>Active</td>
                        <td>
                            <button class="btn btn-sm btn-success" onclick="returnVehicle(${rental.id})">Return</button>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        function clearReturnFilters() {
            document.getElementById('returnStartDate').value = '';
            document.getElementById('returnEndDate').value = '';
            document.getElementById('returnSearch').value = '';
            loadReturns();
        }

        // Customer search for rental form
        function searchCustomersForRental(query) {
            const suggestions = document.getElementById('customerSuggestions');
            
            if (query.length < 2) {
                suggestions.style.display = 'none';
                return;
            }
            
            const filteredCustomers = appData.customers.filter(customer => 
                customer.fullName.toLowerCase().includes(query.toLowerCase())
            );
            
            if (filteredCustomers.length === 0) {
                suggestions.style.display = 'none';
                return;
            }
            
            suggestions.innerHTML = filteredCustomers.map(customer => `
                <div class="suggestion-item" onclick="selectCustomer('${customer.fullName}')">
                    ${customer.fullName}
                </div>
            `).join('');
            
            suggestions.style.display = 'block';
        }

        // Vehicle search for rental form
        function searchVehiclesForRental(query) {
            const suggestions = document.getElementById('vehicleSuggestions');
            
            if (query.length < 2) {
                suggestions.style.display = 'none';
                return;
            }
            
            const filteredVehicles = appData.vehicles.filter(vehicle => 
                vehicle.name.toLowerCase().includes(query.toLowerCase()) && vehicle.status === 'available'
            );
            
            if (filteredVehicles.length === 0) {
                suggestions.style.display = 'none';
                return;
            }
            
            suggestions.innerHTML = filteredVehicles.map(vehicle => `
                <div class="suggestion-item" onclick="selectVehicle('${vehicle.name}')">
                    ${vehicle.name} - ${vehicle.model} (${vehicle.plate})
                </div>
            `).join('');
            
            suggestions.style.display = 'block';
        }

        // Customer search for debt form
        function searchCustomersForDebt(query) {
            const suggestions = document.getElementById('debtCustomerSuggestions');
            
            if (query.length < 2) {
                suggestions.style.display = 'none';
                return;
            }
            
            const filteredCustomers = appData.customers.filter(customer => 
                customer.fullName.toLowerCase().includes(query.toLowerCase())
            );
            
            if (filteredCustomers.length === 0) {
                suggestions.style.display = 'none';
                return;
            }
            
            suggestions.innerHTML = filteredCustomers.map(customer => `
                <div class="suggestion-item" onclick="selectDebtCustomer('${customer.fullName}')">
                    ${customer.fullName}
                </div>
            `).join('');
            
            suggestions.style.display = 'block';
        }

        // Customer search for fine form
        function searchCustomersForFine(query) {
            const suggestions = document.getElementById('fineCustomerSuggestions');
            
            if (query.length < 2) {
                suggestions.style.display = 'none';
                return;
            }
            
            const filteredCustomers = appData.customers.filter(customer => 
                customer.fullName.toLowerCase().includes(query.toLowerCase())
            );
            
            if (filteredCustomers.length === 0) {
                suggestions.style.display = 'none';
                return;
            }
            
            suggestions.innerHTML = filteredCustomers.map(customer => `
                <div class="suggestion-item" onclick="selectFineCustomer('${customer.fullName}')">
                    ${customer.fullName}
                </div>
            `).join('');
            
            suggestions.style.display = 'block';
        }

        // Vehicle search for maintenance form
        function searchVehiclesForMaintenance(query) {
            const suggestions = document.getElementById('maintenanceVehicleSuggestions');
            
            if (query.length < 2) {
                suggestions.style.display = 'none';
                return;
            }
            
            const filteredVehicles = appData.vehicles.filter(vehicle => 
                vehicle.name.toLowerCase().includes(query.toLowerCase())
            );
            
            if (filteredVehicles.length === 0) {
                suggestions.style.display = 'none';
                return;
            }
            
            suggestions.innerHTML = filteredVehicles.map(vehicle => `
                <div class="suggestion-item" onclick="selectMaintenanceVehicle('${vehicle.name}')">
                    ${vehicle.name} - ${vehicle.model} (${vehicle.plate})
                </div>
            `).join('');
            
            suggestions.style.display = 'block';
        }

        // Select customer for rental
        function selectCustomer(fullName) {
            document.getElementById('rentalCustomer').value = fullName;
            document.getElementById('customerSuggestions').style.display = 'none';
        }

        // Select vehicle for rental
        function selectVehicle(name) {
            document.getElementById('rentalVehicle').value = name;
            document.getElementById('vehicleSuggestions').style.display = 'none';
        }

        // Select customer for debt
        function selectDebtCustomer(fullName) {
            document.getElementById('debtCustomer').value = fullName;
            document.getElementById('debtCustomerSuggestions').style.display = 'none';
            updateCustomerDebtSummary(fullName);
        }

        // Select customer for fine
        function selectFineCustomer(fullName) {
            document.getElementById('fineCustomer').value = fullName;
            document.getElementById('fineCustomerSuggestions').style.display = 'none';
        }

        // Select vehicle for maintenance
        function selectMaintenanceVehicle(name) {
            document.getElementById('maintenanceVehicle').value = name;
            document.getElementById('maintenanceVehicleSuggestions').style.display = 'none';
        }

        // Update customer debt summary
        function updateCustomerDebtSummary(customerName) {
            const customer = appData.customers.find(c => c.fullName === customerName);
            if (!customer) return;
            
            // Calculate customer debt
            const customerRentals = appData.rentals.filter(r => r.customerId === customer.id && r.status === 'active');
            const customerFines = appData.fines.filter(f => f.customerId === customer.id);
            const customerPayments = appData.payments.filter(p => p.customerId === customer.id);
            
            let totalDebt = 0;
            let rentalDebt = 0;
            let fineDebt = 0;
            let paymentTotal = 0;
            
            // Calculate rental debt
            customerRentals.forEach(rental => {
                rentalDebt += rental.amount * rental.days;
            });
            
            // Calculate fine debt
            customerFines.forEach(fine => {
                fineDebt += fine.amount;
            });
            
            // Calculate payment total
            customerPayments.forEach(payment => {
                paymentTotal += payment.amount;
            });
            
            totalDebt = rentalDebt + fineDebt - paymentTotal;
            
            // Update current debt display
            document.getElementById('currentDebt').textContent = formatCurrency(totalDebt, 'USD');
            
            // Update customer debt summary
            const summaryDiv = document.getElementById('customerDebtSummary');
            summaryDiv.innerHTML = `
                <div class="row">
                    <div class="col-md-4">
                        <strong>Rental Debt:</strong> ${formatCurrency(rentalDebt, 'USD')}
                    </div>
                    <div class="col-md-4">
                        <strong>Fines/Taxes:</strong> ${formatCurrency(fineDebt, 'USD')}
                    </div>
                    <div class="col-md-4">
                        <strong>Payments:</strong> ${formatCurrency(paymentTotal, 'USD')}
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-12">
                        <strong>Total Debt:</strong> ${formatCurrency(totalDebt, 'USD')}
                    </div>
                </div>
            `;
        }

        // Update customer debt (for payments and fines)
        function updateCustomerDebt(customerId) {
            const customer = appData.customers.find(c => c.id === customerId);
            if (!customer) return;
            
            const currentDebtCustomer = document.getElementById('debtCustomer').value;
            if (currentDebtCustomer === customer.fullName) {
                updateCustomerDebtSummary(customer.fullName);
            }
        }

        // Generate report
        function generateReport() {
            const reportType = document.getElementById('reportType').value;
            const startDate = document.getElementById('reportStartDate').value;
            const endDate = document.getElementById('reportEndDate').value;
            
            let reportData = [];
            let reportTitle = '';
            
            switch (reportType) {
                case 'rentals':
                    reportTitle = 'Rentals Report';
                    reportData = appData.rentals.filter(rental => {
                        if (startDate && rental.date < startDate) return false;
                        if (endDate && rental.date > endDate) return false;
                        return true;
                    }).map(rental => {
                        const customer = appData.customers.find(c => c.id === rental.customerId);
                        const vehicle = appData.vehicles.find(v => v.id === rental.vehicleId);
                        return {
                            'Invoice Code': rental.invoiceCode,
                            'Customer': customer ? customer.fullName : 'Unknown',
                            'Vehicle': vehicle ? vehicle.name : 'Unknown',
                            'Date': rental.date,
                            'Amount': formatCurrency(rental.amount, rental.currency),
                            'Days': rental.days,
                            'Status': rental.status
                        };
                    });
                    break;
                    
                case 'payments':
                    reportTitle = 'Payments Report';
                    reportData = appData.payments.filter(payment => {
                        if (startDate && payment.date < startDate) return false;
                        if (endDate && payment.date > endDate) return false;
                        return true;
                    }).map(payment => {
                        const customer = appData.customers.find(c => c.id === payment.customerId);
                        return {
                            'Date': payment.date,
                            'Customer': customer ? customer.fullName : 'Unknown',
                            'Amount': formatCurrency(payment.amount, payment.currency)
                        };
                    });
                    break;
                    
                case 'fines':
                    reportTitle = 'Fines & Taxes Report';
                    reportData = appData.fines.filter(fine => {
                        if (startDate && fine.date < startDate) return false;
                        if (endDate && fine.date > endDate) return false;
                        return true;
                    }).map(fine => {
                        const customer = appData.customers.find(c => c.id === fine.customerId);
                        return {
                            'Date': fine.date,
                            'Customer': customer ? customer.fullName : 'Unknown',
                            'Type': fine.type,
                            'Amount': formatCurrency(fine.amount, fine.currency),
                            'Description': fine.description
                        };
                    });
                    break;
                    
                case 'vehicles':
                    reportTitle = 'Vehicles Report';
                    reportData = appData.vehicles.map(vehicle => {
                        const rentalCount = appData.rentals.filter(r => r.vehicleId === vehicle.id).length;
                        return {
                            'Name': vehicle.name,
                            'Model': vehicle.model,
                            'Color': vehicle.color,
                            'Plate': vehicle.plate,
                            'Odometer': vehicle.odometer,
                            'Rental Price': formatCurrency(vehicle.rentalPrice, vehicle.rentalCurrency),
                            'Status': vehicle.status,
                            'Rental Count': rentalCount
                        };
                    });
                    break;
                    
                case 'maintenance':
                    reportTitle = 'Maintenance Report';
                    reportData = appData.maintenance.filter(maintenance => {
                        if (startDate && maintenance.date < startDate) return false;
                        if (endDate && maintenance.date > endDate) return false;
                        return true;
                    }).map(maintenance => {
                        const vehicle = appData.vehicles.find(v => v.id === maintenance.vehicleId);
                        return {
                            'Date': maintenance.date,
                            'Vehicle': vehicle ? vehicle.name : 'Unknown',
                            'Type': maintenance.type,
                            'Cost': formatCurrency(maintenance.cost, maintenance.currency),
                            'Description': maintenance.description
                        };
                    });
                    break;
            }
            
            // Display report results
            const reportResults = document.getElementById('reportResults');
            
            if (reportData.length === 0) {
                reportResults.innerHTML = '<p>No data found for the selected criteria.</p>';
                return;
            }
            
            // Create table
            let tableHTML = `
                <h4>${reportTitle}</h4>
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
            `;
            
            // Add table headers
            const headers = Object.keys(reportData[0]);
            headers.forEach(header => {
                tableHTML += `<th>${header}</th>`;
            });
            
            tableHTML += `
                            </tr>
                        </thead>
                        <tbody>
            `;
            
            // Add table rows
            reportData.forEach(row => {
                tableHTML += '<tr>';
                headers.forEach(header => {
                    tableHTML += `<td>${row[header]}</td>`;
                });
                tableHTML += '</tr>';
            });
            
            tableHTML += `
                        </tbody>
                    </table>
                </div>
            `;
            
            reportResults.innerHTML = tableHTML;
        }

        // Export report to Excel
        function exportReport() {
            // In a real application, this would generate an Excel file
            // For this demo, we'll just show an alert
            alert('Export functionality would be implemented here. In a real application, this would generate an Excel file with the report data.');
        }

        // Print invoice
        function printInvoice(rentalId) {
            const rental = appData.rentals.find(r => r.id === rentalId);
            if (!rental) return;
            
            const customer = appData.customers.find(c => c.id === rental.customerId);
            const vehicle = appData.vehicles.find(v => v.id === rental.vehicleId);
            
            // Get customer's rental history
            const customerRentals = appData.rentals.filter(r => r.customerId === rental.customerId);
            
            // Update print content
            document.getElementById('printInvoiceCode').textContent = rental.invoiceCode;
            document.getElementById('printInvoiceDate').textContent = rental.date;
            document.getElementById('printCustomerName').textContent = customer ? customer.fullName : 'Unknown';
            document.getElementById('printVehicleName').textContent = vehicle ? vehicle.name : 'Unknown';
            document.getElementById('printCustomerId').textContent = customer ? customer.idNumber : 'Unknown';
            document.getElementById('printCustomerAddress').textContent = customer ? customer.address : 'Unknown';
            document.getElementById('printRentalAmount').textContent = formatCurrency(rental.amount, rental.currency);
            document.getElementById('printRentalDays').textContent = rental.days;
            document.getElementById('printTotalAmount').textContent = formatCurrency(rental.amount * rental.days, rental.currency);
            
            // Add rental history
            const rentalHistory = customerRentals.map(r => {
                const v = appData.vehicles.find(veh => veh.id === r.vehicleId);
                return `${r.date} - ${v ? v.name : 'Unknown'} - ${formatCurrency(r.amount, r.currency)} - ${r.status}`;
            }).join('<br>');
            
            document.getElementById('printRentalHistory').innerHTML = rentalHistory;
            
            // Show print dialog
            const printContent = document.getElementById('invoicePrint').innerHTML;
            const originalContent = document.body.innerHTML;
            
            document.body.innerHTML = printContent;
            window.print();
            document.body.innerHTML = originalContent;
            
            // Re-initialize the application
            showMainApp();
        }

        // Print payment receipt
        function printPaymentReceipt(paymentId) {
            const payment = appData.payments.find(p => p.id === paymentId);
            if (!payment) return;
            
            const customer = appData.customers.find(c => c.id === payment.customerId);
            
            // Update print content
            document.getElementById('printReceiptNo').textContent = `REC${payment.id}`;
            document.getElementById('printPaymentDate').textContent = payment.date;
            document.getElementById('printPaymentCustomer').textContent = customer ? customer.fullName : 'Unknown';
            document.getElementById('printPaymentAmount').textContent = formatCurrency(payment.amount, payment.currency);
            document.getElementById('printPaymentTotal').textContent = formatCurrency(payment.amount, payment.currency);
            
            // Show print dialog
            const printContent = document.getElementById('paymentReceiptPrint').innerHTML;
            const originalContent = document.body.innerHTML;
            
            document.body.innerHTML = printContent;
            window.print();
            document.body.innerHTML = originalContent;
            
            // Re-initialize the application
            showMainApp();
        }

        // Show vehicle details
        function showVehicleDetails(vehicleId) {
            const vehicle = appData.vehicles.find(v => v.id === vehicleId);
            if (!vehicle) return;
            
            const detailsContent = document.getElementById('vehicleDetailsContent');
            detailsContent.innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <h5>Vehicle Information</h5>
                        <p><strong>Name:</strong> ${vehicle.name}</p>
                        <p><strong>Model:</strong> ${vehicle.model}</p>
                        <p><strong>Color:</strong> ${vehicle.color}</p>
                        <p><strong>Plate Number:</strong> ${vehicle.plate}</p>
                        <p><strong>VIN:</strong> ${vehicle.vin}</p>
                        <p><strong>Odometer:</strong> ${vehicle.odometer.toLocaleString()} km</p>
                        <p><strong>Rental Price:</strong> ${formatCurrency(vehicle.rentalPrice, vehicle.rentalCurrency)}</p>
                        <p><strong>Status:</strong> ${vehicle.status}</p>
                    </div>
                    <div class="col-md-6">
                        <h5>Rental History</h5>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Customer</th>
                                        <th>Amount</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${appData.rentals.filter(r => r.vehicleId === vehicleId).map(rental => {
                                        const customer = appData.customers.find(c => c.id === rental.customerId);
                                        return `
                                            <tr>
                                                <td>${rental.date}</td>
                                                <td>${customer ? customer.fullName : 'Unknown'}</td>
                                                <td>${formatCurrency(rental.amount, rental.currency)}</td>
                                            </tr>
                                        `;
                                    }).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <h5>Maintenance History</h5>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Type</th>
                                        <th>Cost</th>
                                        <th>Description</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${appData.maintenance.filter(m => m.vehicleId === vehicleId).map(maintenance => `
                                        <tr>
                                            <td>${maintenance.date}</td>
                                            <td>${maintenance.type}</td>
                                            <td>${formatCurrency(maintenance.cost, maintenance.currency)}</td>
                                            <td>${maintenance.description}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            `;
            
            document.getElementById('vehicleDetailsCard').style.display = 'block';
        }

        // Show customer details
        function showCustomerDetails(customerId) {
            const customer = appData.customers.find(c => c.id === customerId);
            if (!customer) return;
            
            // Calculate customer statistics
            const customerRentals = appData.rentals.filter(r => r.customerId === customerId);
            const customerFines = appData.fines.filter(f => f.customerId === customerId);
            const customerPayments = appData.payments.filter(p => p.customerId === customerId);
            
            let totalRentals = customerRentals.length;
            let totalSpent = customerRentals.reduce((sum, rental) => sum + (rental.amount * rental.days), 0);
            let totalFines = customerFines.reduce((sum, fine) => sum + fine.amount, 0);
            let totalPayments = customerPayments.reduce((sum, payment) => sum + payment.amount, 0);
            let currentDebt = totalSpent + totalFines - totalPayments;
            
            const detailsContent = document.getElementById('customerDetailsContent');
            detailsContent.innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <h5>Customer Information</h5>
                        <p><strong>Full Name:</strong> ${customer.fullName}</p>
                        <p><strong>Age:</strong> ${customer.age}</p>
                        <p><strong>ID Number:</strong> ${customer.idNumber}</p>
                        <p><strong>Nationality:</strong> ${customer.nationality}</p>
                        <p><strong>Contact:</strong> ${customer.contact}</p>
                        <p><strong>Address:</strong> ${customer.address}</p>
                        ${customer.guaranteeDoc ? `<p><strong>Guarantee Document:</strong> ${customer.guaranteeDoc}</p>` : ''}
                    </div>
                    <div class="col-md-6">
                        <h5>Customer Statistics</h5>
                        <p><strong>Total Rentals:</strong> ${totalRentals}</p>
                        <p><strong>Total Spent:</strong> ${formatCurrency(totalSpent, 'USD')}</p>
                        <p><strong>Total Fines:</strong> ${formatCurrency(totalFines, 'USD')}</p>
                        <p><strong>Total Payments:</strong> ${formatCurrency(totalPayments, 'USD')}</p>
                        <p><strong>Current Debt:</strong> ${formatCurrency(currentDebt, 'USD')}</p>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <h5>Rental History</h5>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Vehicle</th>
                                        <th>Amount</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${customerRentals.map(rental => {
                                        const vehicle = appData.vehicles.find(v => v.id === rental.vehicleId);
                                        return `
                                            <tr>
                                                <td>${rental.date}</td>
                                                <td>${vehicle ? vehicle.name : 'Unknown'}</td>
                                                <td>${formatCurrency(rental.amount, rental.currency)}</td>
                                                <td>${rental.status}</td>
                                            </tr>
                                        `;
                                    }).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            `;
            
            document.getElementById('customerDetailsCard').style.display = 'block';
        }

        // Format currency
        function formatCurrency(amount, currency) {
            if (currency === 'IQD') {
                return `${amount.toLocaleString()} IQD`;
            } else {
                return `$${amount.toLocaleString()}`;
            }
        }

        // Save data to localStorage
        function saveData() {
            localStorage.setItem('carRentalData', JSON.stringify(appData));
        }

        // Admin functions for editing and deleting
        function editVehicle(id) {
            const vehicle = appData.vehicles.find(v => v.id === id);
            if (!vehicle) return;
            
            document.getElementById('vehicleName').value = vehicle.name;
            document.getElementById('vehicleOdometer').value = vehicle.odometer;
            document.getElementById('vehicleVin').value = vehicle.vin;
            document.getElementById('vehiclePlate').value = vehicle.plate;
            document.getElementById('vehicleColor').value = vehicle.color;
            document.getElementById('vehicleModel').value = vehicle.model;
            document.getElementById('vehicleRentalPrice').value = vehicle.rentalPrice;
            document.getElementById('vehicleRentalCurrency').value = vehicle.rentalCurrency;
            
            // Change form to update mode
            const form = document.getElementById('addVehicleForm');
            const submitBtn = form.querySelector('button[type="submit"]');
            submitBtn.textContent = 'Update Vehicle';
            submitBtn.classList.remove('btn-primary');
            submitBtn.classList.add('btn-warning');
            
            // Remove existing event listener and add update listener
            form.onsubmit = function(e) {
                e.preventDefault();
                updateVehicle(id);
            };
            
            // Scroll to form
            document.querySelector('[href="#addVehicle"]').click();
        }

        function updateVehicle(id) {
            const vehicle = appData.vehicles.find(v => v.id === id);
            if (!vehicle) return;
            
            vehicle.name = document.getElementById('vehicleName').value;
            vehicle.odometer = parseInt(document.getElementById('vehicleOdometer').value);
            vehicle.vin = document.getElementById('vehicleVin').value;
            vehicle.plate = document.getElementById('vehiclePlate').value;
            vehicle.color = document.getElementById('vehicleColor').value;
            vehicle.model = document.getElementById('vehicleModel').value;
            vehicle.rentalPrice = parseFloat(document.getElementById('vehicleRentalPrice').value);
            vehicle.rentalCurrency = document.getElementById('vehicleRentalCurrency').value;
            
            saveData();
            loadVehicles();
            
            // Reset form
            document.getElementById('addVehicleForm').reset();
            const submitBtn = document.querySelector('#addVehicleForm button[type="submit"]');
            submitBtn.textContent = 'Add Vehicle';
            submitBtn.classList.remove('btn-warning');
            submitBtn.classList.add('btn-primary');
            
            // Reset event listener
            document.getElementById('addVehicleForm').onsubmit = function(e) {
                e.preventDefault();
                addVehicle();
            };
            
            alert('Vehicle updated successfully!');
        }

        function deleteVehicle(id) {
            if (confirm('Are you sure you want to delete this vehicle?')) {
                appData.vehicles = appData.vehicles.filter(v => v.id !== id);
                saveData();
                loadVehicles();
                alert('Vehicle deleted successfully!');
            }
        }

        function editCustomer(id) {
            const customer = appData.customers.find(c => c.id === id);
            if (!customer) return;
            
            document.getElementById('customerFullName').value = customer.fullName;
            document.getElementById('customerAge').value = customer.age;
            document.getElementById('customerId').value = customer.idNumber;
            document.getElementById('customerNationality').value = customer.nationality;
            document.getElementById('customerContact').value = customer.contact;
            document.getElementById('customerAddress').value = customer.address;
            
            // Change form to update mode
            const form = document.getElementById('addCustomerForm');
            const submitBtn = form.querySelector('button[type="submit"]');
            submitBtn.textContent = 'Update Customer';
            submitBtn.classList.remove('btn-primary');
            submitBtn.classList.add('btn-warning');
            
            // Remove existing event listener and add update listener
            form.onsubmit = function(e) {
                e.preventDefault();
                updateCustomer(id);
            };
            
            // Scroll to form
            document.querySelector('[href="#addCustomer"]').click();
        }

        function updateCustomer(id) {
            const customer = appData.customers.find(c => c.id === id);
            if (!customer) return;
            
            customer.fullName = document.getElementById('customerFullName').value;
            customer.age = parseInt(document.getElementById('customerAge').value);
            customer.idNumber = document.getElementById('customerId').value;
            customer.nationality = document.getElementById('customerNationality').value;
            customer.contact = document.getElementById('customerContact').value;
            customer.address = document.getElementById('customerAddress').value;
            
            saveData();
            loadCustomers();
            
            // Reset form
            document.getElementById('addCustomerForm').reset();
            const submitBtn = document.querySelector('#addCustomerForm button[type="submit"]');
            submitBtn.textContent = 'Add Customer';
            submitBtn.classList.remove('btn-warning');
            submitBtn.classList.add('btn-primary');
            
            // Reset event listener
            document.getElementById('addCustomerForm').onsubmit = function(e) {
                e.preventDefault();
                addCustomer();
            };
            
            alert('Customer updated successfully!');
        }

        function deleteCustomer(id) {
            if (confirm('Are you sure you want to delete this customer?')) {
                appData.customers = appData.customers.filter(c => c.id !== id);
                saveData();
                loadCustomers();
                alert('Customer deleted successfully!');
            }
        }

        function editRental(id) {
            alert(`Edit rental with ID: ${id} - This would open an edit form in a real application.`);
        }

        function deleteRental(id) {
            if (confirm('Are you sure you want to delete this rental?')) {
                const rental = appData.rentals.find(r => r.id === id);
                if (rental) {
                    // Make the vehicle available again if it was rented
                    if (rental.status === 'active') {
                        const vehicle = appData.vehicles.find(v => v.id === rental.vehicleId);
                        if (vehicle) {
                            vehicle.status = 'available';
                        }
                    }
                }
                
                appData.rentals = appData.rentals.filter(r => r.id !== id);
                saveData();
                loadRentals();
                loadVehicles();
                alert('Rental deleted successfully!');
            }
        }

        function deletePayment(id) {
            if (confirm('Are you sure you want to delete this payment?')) {
                appData.payments = appData.payments.filter(p => p.id !== id);
                saveData();
                loadPayments();
                alert('Payment deleted successfully!');
            }
        }

        function editFine(id) {
            alert(`Edit fine with ID: ${id} - This would open an edit form in a real application.`);
        }

        function deleteFine(id) {
            if (confirm('Are you sure you want to delete this fine?')) {
                appData.fines = appData.fines.filter(f => f.id !== id);
                saveData();
                loadFines();
                alert('Fine deleted successfully!');
            }
        }

        function editMaintenance(id) {
            alert(`Edit maintenance with ID: ${id} - This would open an edit form in a real application.`);
        }

        function deleteMaintenance(id) {
            if (confirm('Are you sure you want to delete this maintenance record?')) {
                appData.maintenance = appData.maintenance.filter(m => m.id !== id);
                saveData();
                loadMaintenance();
                alert('Maintenance record deleted successfully!');
            }
        }

        function editUser(username) {
            alert(`Edit user: ${username} - This would open an edit form in a real application.`);
        }

        function toggleUserStatus(username) {
            const user = appData.users.find(u => u.username === username);
            if (user) {
                user.active = !user.active;
                saveData();
                loadUsers();
                alert(`User ${user.active ? 'activated' : 'deactivated'} successfully!`);
            }
        }

        function deleteUser(username) {
            if (confirm(`Are you sure you want to delete user ${username}?`)) {
                if (username === appData.currentUser.username) {
                    alert('You cannot delete your own account!');
                    return;
                }
                
                appData.users = appData.users.filter(u => u.username !== username);
                saveData();
                loadUsers();
                alert('User deleted successfully!');
            }
        }
    </script>
</body>
</html>
